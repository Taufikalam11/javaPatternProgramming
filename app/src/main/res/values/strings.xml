<resources>

    <string name="app_name" translatable="false">Java Pattern Program</string>

    <string name="multi_color_text">
    <![CDATA[<font color="#FF0000">Red text</font> <font color="#00FF00">Green text</font> <font color="#0000FF">Blue text</font>]]>
</string>
   <string name="code">

       <![CDATA[

        public class Pattern1\n
{\n
    public static void pyramidPattern(int n)\n
    {\n
        for (int i=0; i<n; i++)\n
		{\n
                System.out.print(\" \");\n
            }\n
            for (int j=0; j<=i; j++ )\n
            {\n
                System.out.print(\"* \");\n
            }\n

            System.out.println();\n
        }\n
    }\n

    public static void main(String args[])\n
    {\n
        int n = 5;\n
        pyramidPattern(n);\n
    }\n
}\n

      ]]>

   </string>


    <string name="Hollow_square_star">


        <![CDATA[



     public class HollowSquareStarPattern \n
     {\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n

        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = 0; j < size; j++) \n
            {\n
                if (i == 0 || i == size - 1 || j == 0 || j == size - 1) \n
                {\n
                    System.out.print(\"*\ ");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

]]>

    </string>




    <string name="Right_Triangle_Star_Pattern">

        <![CDATA[

     public class RightTriangleStarPattern \n
     {\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n

        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = 0; j <= i; j++) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>








    </string>


    <string name="Hollow_Right_Triangle_Star_Pattern">


    <![CDATA[


    public class HollowRightTriangleStarPattern \n
    {\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n

        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = 0; j <= i; j++) \n
            {\n
                if (i == 0 || i == j || j == 0) \n
                {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\" \ ");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n


    ]]>
 </string>


    <string name="Left_Triangle_star_pattern">

        <![CDATA[

 public class LeftTrianglePattern  \n
{    \n
public static void main(String args[])   \n
{    \n

int i, j, row = 5;  \n

for (i=0; i<row; i++)   \n
{  \n

for (j=2*(row-i); j>=0; j-\-)  \n
{  \n

System.out.print(\"\ ");   \n
}   \n

for (j=0; j<=i; j++ )   \n
{   \n

System.out.print(\"* \");   \n
}   \n

System.out.println();   \n
}   \n
}   \n
}  \n
         ]]>

    </string>


<string name="Inverted_Right_Triangle_Star_Pattern">

    <![CDATA[


    public class InvertedRightTriangleStarPattern\n
     {\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n

        for (int i = size; i >= 1; i-\-)\n
         {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(\"* \");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

    \n

  
    ]]>



</string>

    <string name="Hollow_Inverted_Right_Triangle_Star_Pattern">


        <![CDATA[

    public class HollowInvertedRightTriangleStarPattern \n
    {\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n

        for (int i = size; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i || i == size) \n
                {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\" \ ");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n


          ]]>

    </string>


    <string name="Inverted_Left_Triangle_Star_Pattern">

        <![CDATA[

public class InvertedLeftTriangleStarPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n

        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = 0; j < i; j++) \n
            {\n
                System.out.print(\" \ ");\n
            }\n
            for (int k = 0; k < size - i; k++) \n
            {\n
                System.out.print(\"* \");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n



        ]]>


    </string>

    <string name="Hollow_Inverted_Left_Triangle_Star_Pattern">
        <![CDATA[


public class HollowInvertedLeftTriangleStarPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n

        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = 0; j < i; j++)\n
             {\n
                System.out.print("  ");\n
            }\n
            for (int k = 0; k < size - i; k++) \n
            {\n
                if (k == 0 || i == size - 1 || k == size - i - 1)\n
                 {\n
                    System.out.print(\"*\ ");\n
                } else {\n
                    System.out.print(\" \ ");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n






        ]]>



    </string>

    <string name="Diamond_Star_Pattern">
        <![CDATA[

public class DiamondStarPattern \n
{\n
    public static void main(String[] args)\n
     {\n
        int size = 5; \n

        // Upper half of the diamond\n
        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = size - 1; j > i; j-\-) \n
            {\n
                System.out.print(\" \ ");\n
            }\n
            for (int k = 0; k < 2 * i + 1; k++) \n
            {\n
                System.out.print(\"* \");\n
            }\n
            System.out.println();\n
        }\n

        // Lower half of the diamond\n
        for (int i = size - 2; i >= 0; i-\-) \n
        {\n
            for (int j = size - 1; j > i; j-\-) \n
            {\n
                System.out.print(\"  \");\n
            }\n
            for (int k = 0; k < 2 * i + 1; k++) \n
            {\n
                System.out.print(\"* \");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>


    </string>
    <string name="Hollow_Diamond_Star_Pattern">

        <![CDATA[

        public class HollowDiamondStarPattern \n
        {\n
    public static void main(String[] args)\n
     {\n
        int size = 5; \n

        // Upper half of the diamond\n
        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = size - 1; j > i; j-\-) \n
            {\n
                System.out.print(\" \ ");\n
            }\n
            for (int k = 0; k < 2 * i + 1; k++) \n
            {\n
                if (k == 0 || k == 2 * i)\n
                 {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\" \ ");\n
                }\n
            }\n
            System.out.println();\n
        }\n

        // Lower half of the diamond\n
        for (int i = size - 2; i >= 0; i-\-) \n
        {\n
            for (int j = size - 1; j > i; j-\-) \n
            {\n
                System.out.print(\" \ ");\n
            }\n
            for (int k = 0; k < 2 * i + 1; k++) \n
            {\n
                if (k == 0 || k == 2 * i) {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\" \ ");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n


        ]]>



    </string>

    <string name="Hourglass_Star_Pattern">
        <![CDATA[

public class HourglassStarPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n

        // Upper half of the hourglass\n
        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = 0; j < i; j++) \n
            {\n
                System.out.print(\" \ ");\n
            }\n
            for (int k = i; k < size; k++) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n

        // Lower half of the hourglass\n
        for (int i = size - 2; i >= 0; i-\-) \n
        {\n
            for (int j = 0; j < i; j++) \n
            {\n
                System.out.print(\" \ ");\n
            }\n
            for (int k = i; k < size; k++) \n
            {\n
                System.out.print(\"* \");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n






]]>



    </string>


<string name="Hollow_Hourglass_Star_Pattern">
    <![CDATA[

    public class HollowHourglassStarPattern \n
    {\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n
        // Upper half of the hourglass\n
        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = 0; j < i; j++) \n
            {\n
                System.out.print(\" \ ");\n
            }\n
            for (int k = i; k < size; k++) \n
            {\n
                if (k == i || k == size - 1 || i == 0) \n
                {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\" \ ");\n
                }\n
            }\n
            System.out.println();\n
        }\n

        // Lower half of the hourglass\n
        for (int i = size - 2; i >= 0; i-\-)\n
         {\n
            for (int j = 0; j < i; j++) \n
            {\n
                System.out.print(\" \ ");\n
            }\n
            for (int k = i; k < size; k++) {\n
                if (k == i || k == size - 1 || i == 0) \n
                {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\" \ ");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

]]>



</string>

    <string name="Rhombus_Star_Pattern">
        <![CDATA[
public class RhombusStarPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n

        // Upper half of the rhombus\n
        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = size - 1; j > i; j-\-) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 0; k < size; k++) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n

        // Lower half of the rhombus\n
        for (int i = 1; i < size; i++) \n
        {\n
            for (int j = 0; j < i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 0; k < size; k++)\n
             {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n



        ]]>


    </string>

    <string name="Hollow_RhombusStar_Pattern">

        <![CDATA[

  import java.util.Scanner;\n
public class HollowRhombusStarPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        Scanner scanner = new Scanner(System.in);\n
\n
        System.out.print(\"Enter the size of the pattern: \");\n
\n
        int size = scanner.nextInt();\n
\n
        // Upper half of the pattern\n

        for (int i = 1; i <= size; i++) \n

        {\n
            for (int j = 1; j <= size - i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int j = 1; j <= size; j++)\n
             {\n
                if (i == 1 || i == size || j == 1 || j == size)\n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n

        // Lower half of the pattern\n

        for (int i = size - 1; i >= 1; i-\-)\n

         {\n
            for (int j = 1; j <= size - i; j++) \n
            {\n
                System.out.print(\" \");\n

            }\n

            for (int j = 1; j <= size; j++) \n

            {\n
                if (i == 1 || i == size || j == 1 || j == size) \n

                {\n
                    System.out.print(\"*\");\n

                } else {\n

                    System.out.print(\" \");\n

                }\n

            }\n
            System.out.println();\n
        }\n

        scanner.close();\n
    }\n
}\n
        ]]>

    </string>

    <string name="Pyramid_Star_Pattern">

        <![CDATA[
public class PyramidStarPattern\n
{\n
  public static void main(String args[]) \n
  {\n
      int n = 5;\n

      for(int i=0;i<n;i++)\n
      {\n
          for(int k=i;k<n;k++)\n
          System.out.print(\" \");\n
          for(int j=0;j<=i;j++)\n
          {\n
            System.out.print(\"*\");\n
          }\n

          System.out.println();\n
      }\n
  }\n
}\n
        ]]>



    </string>

    <string name="Hollow_Pyramid_Star_Pattern">

        <![CDATA[

  public class HollowPyramidStarPattern\n
{\n
  public static void main(String args[]) \n
  {\n
      int n = 5; \n
      for(int i=0;i<n;i++)\n
      {\n
          for(int k=i;k<n;k++)\n
          System.out.print(\" \");\n

          for(int j=0;j<=2*i;j++)\n
          {\n

            if(j==0 || j==2*i || i==0 || i==n-1)\n
            System.out.print(\"*\");\n
            else\n
            System.out.print(\" \");\n
          }\n
          System.out.println();\n
      }\n
  }\n
}  \n

]]>


    </string>






    <string name="Chessboard_Star_Pattern">
        <![CDATA[
        import java.util.Scanner;\n
\n
public class ChessboardStarPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        Scanner scanner = new Scanner(System.in);\n
\n
        System.out.print("Enter the size: ");\n
        \n
        int size = scanner.nextInt();\n
\n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if ((i + j) % 2 == 0) \n
                {\n
                    System.out.print(\"*\");\n
                    \n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n

        scanner.close();\n
    }\n
}\n
        ]]>
    </string>

    <string name="Hollow_Chessboard_Star_Pattern">
        <![CDATA[
        import java.util.Scanner;\n
\n
public class HollowChessboardStarPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        Scanner scanner = new Scanner(System.in);\n
\n
        System.out.print("Enter the size: ");\n
        \n
        int size = scanner.nextInt();\n
\n
        for (int i = 1; i <= size; i++)\n
         {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (i == 1 || i == size || j == 1 || j == size || (i + j) % 2 == 0)\n
                 {\n
                    System.out.print(\"*\");\n
                    \n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n

        scanner.close();\n
    }\n
}\n


        ]]>



    </string>


    <string name="Swirl_Star_Pattern">
  <![CDATA[

    public class SwirlStarPattern \n
    {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n

        for (int i = 1; i <= rows; i++) \n
        {\n

            for (int j = 1; j < i; j++) \n
            {\n
                System.out.print(\" \");\n

            }\n


            for (int k = i; k <= rows; k++) \n
            {\n
                System.out.print(\"* \");\n
            }\n

            System.out.println(); \n
        }\n

        for (int i = rows - 1; i >= 1; i-\-) \n
        {\n

            for (int j = 1; j < i; j++)\n
             {\n
                System.out.print(\" \");\n
            }\n


            for (int k = i; k <= rows; k++) \n
            {\n
                System.out.print(\"* \");\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n

  ]]>




    </string>

    <string name="Hollow_Swirl_Star_Pattern">

        <![CDATA[
public class HollowSwirlStarPattern\n
{\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n

        for (int i = 1; i <= rows; i++) \n
        {\n

            for (int j = 1; j < i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n


            for (int k = i; k <= rows; k++) \n
            {\n
                if (k == i || k == rows || i == 1) \n
                {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\" \ ");\n
                }\n
            }\n

            System.out.println(); \n
        }\n

        for (int i = rows - 1; i >= 1; i-\-) \n
        {\n

            for (int j = 1; j < i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n


            for (int k = i; k <= rows; k++) \n
            {\n
                if (k == i || k == rows || i == 1) \n
                {\n
                    System.out.print(\"* \");\n
                    \n
                } else {\n
                    System.out.print(\" \ ");\n
                }\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n


        ]]>


    </string>

    <string name="Circle_Star_Pattern">

        <![CDATA[

        public class CircleStarPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int radius = 5; \n
\n
        int centerX = radius; \n
        \n
        int centerY = radius; \n
\n
        for (int y = 0; y <= 2 * radius; y++) \n
        {\n
            for (int x = 0; x <= 2 * radius; x++)\n
            {\n
                double distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));\n
\n
                if (Math.abs(distance - radius) < 0.5) \n
                {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\" \ ");\n
                }\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n


        ]]>

    </string>

    <string name="Oval_Star_Pattern">
        <![CDATA[

        public class OvalStarPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int width = 5; \n
        \n
        int height = 3; \n
\n
        double aspectRatio = (double) width / height;\n

        for (int y = 0; y <= 2 * height; y++) \n
        {
            for (int x = 0; x <= 2 * width; x++) \n
            {\n
                double normalizedX = (double) (x - width) / width;\n
                \n
                double normalizedY = (double) (y - height) / height;\n
\n
                if (normalizedX * normalizedX + normalizedY * normalizedY <= 1) \n
                {\n
                    System.out.print(\"* \");\n
                } else {
                    System.out.print(\" \ ");\n
                }\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n

        ]]>

    </string>

    <string name="Hexagon_Star_Pattern">

        <![CDATA[


        public class HexagonStarPattern \n
        {\n
    public static void main(String[] args)\n
    {\n
        int size = 5;\n
        \n
        int rows = 2 * size - 1;\n
        \n
        for (int i = 1; i <= rows; i++) \n
        {\n
            int spaces = Math.abs(i - size);\n
            \n
            int stars = rows - spaces;\n
            \n
            for (int j = 1; j <= spaces; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n

            for (int k = 1; k <= stars; k++) \n
            {\n
                System.out.print(\"* \");\n
            }\n

            System.out.println();\n
        }\n
    }\n
}\n

]]>
    </string>

    <string name="Hollow_Hexagon_Star_Pattern">

        <![CDATA[
        public class HollowHexagonStarPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int size = 5;
        \n
        int rows = 2 * size - 1;\n
        \n
        for (int i = 1; i <= rows; i++) \n
        {\n
            int spaces = Math.abs(i - size);\n
            \n
            int stars = rows - spaces;\n
            \n
            for (int j = 1; j <= spaces; j++)\n
             {\n
                System.out.print(\" \");\n
            }\n

            for (int k = 1; k <= stars; k++) \n
            {\n
                if (k == 1 || k == stars || i == 1 || i == rows)\n
                {\n
                    System.out.print(\"* \");\n
                    \n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n

            System.out.println();\n
        }\n
    }\n
}\n

        ]]>


    </string>

<string name="Snowman_Star_Pattern">

    <![CDATA[


    public class SnowmanStarPattern \n
    {\n
    public static void main(String[] args) \n
    {\n
        int size = 5;\n

        // Top part of the snowman\n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size - i; j++)\n
             {\n
                System.out.print(\" \");\n
            }\n

            for (int k = 1; k <= 2 * i - 1; k++) \n
            {\n
                System.out.print(\"*\");\n
            }\n

            System.out.println();\n
        }\n

        // Middle part of the snowman\n
        for (int i = 1; i <= size - 2; i++) \n
        {\n
            for (int j = 1; j <= size - 1; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n

            System.out.println(\"*\");\n
        }\n

        // Bottom part of the snowman\n
        for (int i = 1; i <= size; i++)\n
         {\n
            for (int j = 1; j <= size - 1; j++) \n
            {\n
             System.out.print(\" \");\n
            }\n
            System.out.println(\"*\");\n
        }\n
    }\n
}\n


    ]]>




</string>

    <string name="Hollow_Snowman_Star_Pattern">

        <![CDATA[
        public class HollowSnowmanStarPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int size = 5;\n
        // Top part of the snowman\n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size - i; j++)\n
             {\n
                System.out.print(\"\ ");\n
            }\n
            for (int k = 1; k <= 2 * i - 1; k++) \n
            {\n
            if (k == 1 || k == 2 * i - 1) \n
            {\n
            System.out.print(\"*\");\n
            } else {\n
            System.out.print(\" \");\n
            }\n
            }\n
          System.out.println();\n
        }\n
        // Middle part of the snowman\n
        for (int i = 1; i <= size - 2; i++)\n
         {\n
         for (int j = 1; j <= size - 1; j++) \n
         {\n
         System.out.print(\" \");\n
         }\n
         System.out.print(\"*\");\n
         System.out.println();\n
        }\n
        // Bottom part of the snowman\n
        for (int i = 1; i <= size; i++) \n
        {\n
        for (int j = 1; j <= size - 1; j++) \n
        {\n
        System.out.print(\" \");\n
        }\n
        System.out.print(\"*\");\n
         System.out.println();\n
        }\n
    }\n
}\n


        ]]>


    </string>

    <string name="Ice_Cream_Star_Pattern">

    <![CDATA[
    public class IceCreamStarPattern \n
    {\n
    public static void main(String[] args)\n
     {\n
        int size = 5;\n

        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size - i + 1; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n

            for (int k = 1; k <= 2 * i - 1; k++) \n
            {\n
                System.out.print(\"*\");\n
            }\n

            System.out.println();\n
        }\n


        for (int i = 1; i <= size - 1; i++) \n
        {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n

            for (int k = 1; k <= 2 * i - 1; k++) \n
            {\n
                System.out.print(\"*\");\n
            }\n

            System.out.println();\n
        }\n
        for (int i = 1; i <= size; i++) \n
        {\n
            System.out.print(\" \");\n
        }\n
        System.out.println(\"*\");\n
    }\n
}\n

    ]]>


    </string>

    <string name="Hollow_Ice_Cream_Star_Pattern">
<![CDATA[

    public class HollowIceCreamStarPattern \n
        {\n
    public static void main(String[] args) \n
        {\n
        int size = 5;\n


        for (int i = 1; i <= size; i++)\n
         {\n
            for (int j = 1; j <= size - i + 1; j++)\n
            {\n
                System.out.print(\" \");\n
            }\n

            for (int k = 1; k <= 2 * i - 1; k++)\n
             {\n
                if (k == 1 || k == 2 * i - 1 || i == size)\n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n

            System.out.println();\n
        }\n


        for (int i = 1; i <= size - 1; i++) \n
        {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n

            for (int k = 1; k <= 2 * i - 1; k++) \n
            {\n
                System.out.print(\"*\");\n
            }\n

            System.out.println();\n
        }\n
        for (int i = 1; i <= size; i++) \n
        {\n
            System.out.print(\" \");\n
        }\n
        System.out.println(\"*\");\n
    }n
}\n

]]>

    </string>
<string name="Balloon_Star_Pattern">
    <![CDATA[
public class BalloonStarPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int size = 5;\n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size - i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 1; k <= 2 * i - 1; k++)\n
            {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size; j++)\n
             {\n
                if (j == size / 2 + 1) \n
                {\n
                    System.out.print(\"|\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n

            System.out.println();\n
        }\n
    }\n
}\n

    ]]>


</string>

    <string name="Hollow_Balloon_Star_Pattern">

        <![CDATA[
        public class HollowBalloonStarPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int size = 5;\n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size - i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 1; k <= 2 * i - 1; k++) \n
            {\n
                if (k == 1 || k == 2 * i - 1 || i == size)\n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n

            System.out.println();\n
        }\n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (j == size / 2 + 1) \n
                {\n
                    System.out.print(\"|\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n

            System.out.println();\n
        }\n
    }\n
}\n

        ]]>
    </string>
<string name="Butterfly_Star_Pattern">
    <![CDATA[
    public class ButterflyStarPattern \n
    {\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n

        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            int spaces = 2 * (size - i);\n
            for (int j = 1; j <= spaces; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n

        for (int i = size; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            int spaces = 2 * (size - i);\n
            for (int j = 1; j <= spaces; j++)\n
             {\n
                System.out.print(\" \");\n
            }\n
            for (int j = 1; j <= i; j++)\n
             {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

    ]]>

</string>

    <string name="Hollow_Butterfly_Star_Pattern">

        <![CDATA[
public class HollowButterflyStarPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int size = 5;\n

        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            int spaces = 2 * (size - i);\n
            for (int j = 1; j <= spaces; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n

        for (int i = size; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i)\n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            int spaces = 2 * (size - i);\n
            for (int j = 1; j <= spaces; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int j = 1; j <= i; j++) \n
            {
                if (j == 1 || j == i) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>

    </string>

    <string name="Dragon_Star_Pattern">

        <![CDATA[
        public class DragonStarPattern \n
        {\n
    public static void main(String[] args)\n
     {\n
        int size = 5;\n

        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            for (int j = 1; j <= 2 * (size - i); j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n

        for (int i = size - 1; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            for (int j = 1; j <= 2 * (size - i); j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n

        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = size; j >= i; j-\-)\n
             {\n
                System.out.print(\"*\");\n
            }\n
            for (int j = 1; j <= 2 * (i - 1); j++)\n
             {\n
                System.out.print(\" \");\n
            }\n
            for (int j = size; j >= i; j-\-) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n

        for (int i = size - 1; i >= 1; i-\-)\n
        {\n
            for (int j = size; j >= i; j-\-) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            for (int j = 1; j <= 2 * (i - 1); j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int j = size; j >= i; j-\-) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>

    </string>

    <string name="Hollow_Dragon_Star_Pattern">

        <![CDATA[
public class HollowDragonStarPattern \n
{\n
    public static void main(String[] args)\n
     {\n
        int size = 5; \n

        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            for (int j = 1; j <= 2 * (size - i); j++)\n
             {\n
                System.out.print(\" \");
            }\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n

        for (int i = size - 1; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= i; j++)\n
             {\n
                if (j == 1 || j == i) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            for (int j = 1; j <= 2 * (size - i); j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n

        for (int i = 1; i <= size; i++)\n
         {\n
            for (int j = size; j >= i; j-\-) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            for (int j = 1; j <= 2 * (i - 1); j++)\n
             {\n
                System.out.print(\" \");\n
            }\n
            for (int j = size; j >= i; j-\-) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n

        for (int i = size - 1; i >= 1; i-\-)\n
         {\n
            for (int j = size; j >= i; j-\-) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            for (int j = 1; j <= 2 * (i - 1); j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int j = size; j >= i; j-\-)\n
            {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>

    </string>

    <string name="Rocket_Star_Pattern">
        <![CDATA[
        public class RocketStarPattern\n
         {\n
    public static void main(String[] args)\n
    {\n
        int rows = 5;\n

        for (int i = 1; i <= rows; i++) \n
        {n

            for (int j = rows - i; j >= 1; j-\-)\n
             {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 1; k <= i; k++) \n
            {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n
        for (int i = 1; i <= rows - 1; i++) \n
        {\n

            for (int j = 1; j <= rows - 1; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            System.out.print(\"*\");\n
            System.out.println();\n
        }\n
        for (int i = 1; i <= rows; i++) \n
        {\n
            for (int j = 1; j <= i - 1; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 1; k <= rows - i + 1; k++)\n
             {\n
                System.out.print(\"*\");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="Hollow_Rocket_Star_Pattern">
        <![CDATA[
public class HollowRocketStarPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int rows = 5;\n

        for (int i = 1; i <= rows; i++) \n
        {\n

            for (int j = rows - i; j >= 1; j-\-) \n
            {\n
                System.out.print(\" \");\n
            }\n
            if (i == 1 || i == rows) \n
            {\n
                for (int k = 1; k <= i; k++)\n
                 {\n
                    System.out.print(\"*\");\n
                }\n
            } else {\n
                System.out.print(\"*\");\n
                for (int k = 1; k <= i - 2; k++) \n
                {\n
                    System.out.print(\"  \");\n
                }\n
                System.out.print(\"*\");\n
            }\n

            System.out.println();\n
        }\n

        for (int i = 1; i <= rows - 1; i++)\n
         {\n

            for (int j = 1; j <= rows - 1; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            System.out.print(\"*\");\n

            System.out.println();\n
        }\n


        for (int i = 1; i <= rows; i++)\n
         {\n

            for (int j = 1; j <= i - 1; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n

            if (i == 1 || i == rows) \n
            {\n
                for (int k = 1; k <= rows - i + 1; k++) \n
                {\n
                    System.out.print(\"*\");\n
                }\n
            } else {\n
                System.out.print(\"*\");\n
                for (int k = 1; k <= rows - i - 1; k++) \n
                {\n
                    System.out.print(\" \");\n
                }\n
                System.out.print(\"*\");\n
            }\n

            System.out.println();\n
        }\n
    }\n
}\n
        ]]>

    </string>

    <string name="Heart_Star_pattern">
        <![CDATA[
        public class HeartPattern \n
        {\n
    public static void main(String[] args)\n
     {\n
        int rows = 6;\n

        for (int i = rows / 2; i <= rows; i += 2) \n
        {\n
            for (int j = 1; j < rows - i; j += 2) \n
            {\n
                System.out.print(\" \");\n
            }\n

            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(\"*\");\n
            }\n

            for (int j = 1; j <= rows - i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n

            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(\"*\");\n
            }\n

            System.out.println();\n
        }\n

        for (int i = rows; i >= 1; i-\-) \n
        {\n
            for (int j = i; j < rows; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n

            for (int j = 1; j <= (i * 2) - 1; j++) \n
            {\n
                System.out.print(\"*\");\n
            }\n

            System.out.println();\n
        }\n
    }\n
}\n

        ]]>
    </string>

    <string name="Inverted_Pyramid_Star_Pattern">

    <![CDATA[

    public class InvertedPyramidStarPattern\n
{\n
  public static void main(String args[]) \n
  {\n
      int n = 5; \n

      for(int i=n;i>0;i-\-)\n
      {\n
          for(int k=i;k<n;k++)\n
          System.out.print(\" \");\n
          for(int j=2*i;j>1;j-\-)\n
          {\n
            System.out.print(\"* \");\n
          }\n
          System.out.println();\n
      }\n
  }\n
}  \n
    ]]>
    </string>

    <string name="Hollow_Inverted_Pyramid_Star_Pattern">

        <![CDATA[
 public class HollowInvertedPyramidStarPattern\n
  {\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n


        for (int i = n; i > 0; i-\-) \n
        {\n
            for (int k = i; k < n; k++)\n
             {\n
                System.out.print(\"  \");\n
            }\n
            for (int j = 2 * i; j > 1; j-\-) \n
            {\n
                if (i == n || i == 1 || j == 2 * i || j == 2) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>

    </string>
<string name="Half_Diamond_Star_Pattern"   >
    <![CDATA[
    public class HalfDiamondStarPattern \n
    {\n
    public static void main(String[] args) \n
    {\n
        int size = 5;\n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(\"* \");\n
            }\n
            System.out.println();\n
        }\n
        for (int i = size - 1; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(\"* \");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

    ]]>



</string>

    <string name="Hollow_Half_Diamond_Star_Pattern">
        <![CDATA[
public class HollowHalfDiamondStarPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int size = 5;\n
       for (int i = 1; i <= size; i++) \n
       {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i || i == size)\n
                 {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
        for (int i = size - 1; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i || i == size) \n
                {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>


    </string>

    <string name="Half_Diamond_Pattern">
        <![CDATA[
public class HalfDiamondPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int rows = 5;\n
        for (int i = 0; i < rows; i++) \n
        {\n
            for (int j = 0; j < rows - i; j++) \n
            {\n
                System.out.print(\"* \");\n
            }\n
            System.out.println();\n
        }\n

        for (int i = 0; i < rows; i++) \n
        {\n
            for (int j = 0; j <= i; j++)\n
             {\n
                System.out.print(\"* \");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>


    </string>

    <string name="Hollow_Half_Diamond_Pattern">

        <![CDATA[
public class HollowHalfDiamondPattern\n
 {\n
    public static void main(String[] args)\n
     {\n
        int rows = 5;\n
        for (int i = 1; i <= rows; i++) \n
        {\n
            for (int j = 1; j <= rows; j++) \n
            {\n
                if (i == 1 || i == rows || j == 1 || j == rows || i == j) \n
                {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n
            System.out.println();\n
        } \n
        for (int i = rows - 1; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= rows; j++) \n
            {\n
                if (i == 1 || i == rows || j == 1 || j == rows || i == j) \n
                {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n


        ]]>

    </string>

    <string name="Left_Arrow_Star_Pattern">
        <![CDATA[

 public class ArrowStarPattern\n
{\n
  public static void main(String args[]) \n
  {\n
      int n = 11; \n

      n = n/2 + 1;\n

      int i=0;\n

      for(i=0;i<n;i++)\n
      {\n
          for(int k=i;k<n-1;k++)\n
          System.out.print(\"  \");\n

          for(int j=i;j<n;j++)\n
          {\n
            System.out.print(\"* \");\n
          }\n

          System.out.println();\n
      }\n

      n=i; \n

      int m=2;\n
      for(i=n;i>1;i-\-)\n
      {\n
          for(int k=i;k<n+1;k++)\n
          System.out.print(\"  \");\n

          for(int j=0;j<m;j++)\n
          {\n

            System.out.print(\"* \");
          }\n
          m++;\n
          System.out.println();\n
      }\n

  }\n
}  \n


        ]]>


    </string>

    <string name="Right_Half_Diamond_Pattern">

        <![CDATA[

    public class RightHalfDiamondPattern\n
      {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        for (int i = 1; i <= rows; i++) \n
        {\n
            for (int j = 1; j <= i - 1; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n
            for (int k = i; k <= rows; k++) \n
            {\n
                System.out.print(\"* \");\n
            }\n
            System.out.println();\n
        } \n
        for (int i = rows - 1; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= i - 1; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n
            for (int k = i; k <= rows; k++) \n
            {\n
                System.out.print(\"* \");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>

    </string>

    <string name="Hollow_Right_Half_Diamond_Pattern">
        <![CDATA[
public class HollowRightHalfDiamondPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int rows = 5;\n
        for (int i = 1; i <= rows; i++) \n
        {\n
            for (int j = 1; j < i; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n
            for (int k = i; k <= rows; k++) \n
            {\n
                if (k == i || k == rows) \n
                {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n
            System.out.println();\n
        } \n
        for (int i = rows - 1; i >= 1; i-\-)\n
         {\n
            for (int j = 1; j < i; j++)\n
            {\n
                System.out.print(\"  \");\n
            }\n
            for (int k = i; k <= rows; k++) \n
            {\n
                if (k == i || k == rows) \n
                {\n
                    System.out.print(\"* \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Cross_or_X_Star_Pattern">
        <![CDATA[
public class CrossStarPattern \n
{\n
  public static void main(String args[]) \n
  {\n
    int n = 5; \n
    int m = 2*n-1; \n
    for(int i=1;i<=m;i++)  \n
    {  \n
      for(int j=1;j<=m;j++)\n
      {  \n

       if(i==j || j==(m-i+1))\n
       {  \n
         System.out.print(\"*\"); \n
       }  \n
       else \n
       System.out.print(\" \"); \n
    }\n
    System.out.println();\n
    }  \n

  }\n
}  \n

        ]]>
    </string>

    <string name="Hollow_Diamond_Pattern">

        <![CDATA[
public class HollowDiamondStarPattern\n

{\n
  public static void main(String args[]) \n
  {
    int n = 6; \n
    for(int i=1; i<=n; i++)\n
    {\n
        for(int j=i; j<=n; j++)\n
        {\n
            System.out.print(\"*\");\n
        }\n
        for(int j=1; j<=(2*i-1); j++)\n
        {\n
            System.out.print(\" \");\n
        }\n
        for(int j=i; j<=n; j++)\n
        {\n
            System.out.print(\"*\");\n
        }\n

        System.out.println();\n
    }\n

    for(int i=1; i<=n; i++)\n
    {\n
        for(int j=1; j<=i; j++)\n
        {\n
            System.out.print(\"*\");\n
        }\n
        for(int j=(2*i-2); j<(2*n-1); j++)\n
        {\n
            System.out.print(\" \");\n
        }\n

        for(int j=1; j<=i; j++)\n
        {\n
            System.out.print(\"*\");\n
        }\n

        System.out.println();\n
    }\n
  }\n
}\n

        ]]>
    </string>

    <string name="Christmas_Tree_Star_Pattern">
        <![CDATA[

public class ChristmasTreeStarPattern\n
{\n
  public static void main(String[] args) \n
  {\n
    int height = 4;\n

	int width = 4;\n

	int space = width * height;\n

	int x = 1;\n

	for(int a = 1;a <= height ;a++)\n
        {\n
	  for(int i = x;i <= width;i++)\n
	  {\n

	   for(int j = space;j >= i;j-\-)\n
	   {\n
		System.out.print(" ");\n
	   }\n

	   for(int k = 1;k <= i;k++)\n
	   {\n
		System.out.print(\"* \");\n
	   }\n
	   System.out.println();\n
	  }\n
	x = x+2;\n
	width = width+2;\n
	}\n
	for(int i = 1;i <= height-1;i++)\n
	{\n
	  for(int j = space-3;j >= 0;j-\-)\n
	  {\n
	   	System.out.print(\" \");\n
	  }\n

	  for(int k= 1;k <= height-1;k++)\n
	  {\n
		 System.out.print(\"* \");\n
	  }\n

	System.out.println();\n
	}\n
}\n
}\n

        ]]>


    </string>

    <string name="A_Star_Pattern">
        <![CDATA[
         public static void main(String[] args) \n
         {\n
        int size = 7; \n

        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size - i; j++)\n
             {\n
                System.out.print(\" \");\n
            }\n
            for (int j = 1; j <= i * 2 - 1; j++) \n
            {\n
                if (j == 1 || j == i * 2 - 1 || i == (size + 1) / 2) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="B_Star_Pattern">
        <![CDATA[
        public static void main(String[] args) \n
        {\n
        int size = 7; \n

        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = 0; j <= size; j++)\n
             {\n
                if (j == 0 || (j == size && i != 0 && i != size / 2 && i != size - 1)\n
                \n
                        || ((i == 0 || i == size / 2 || i == size - 1) && j < size))\n
                        \n
                    System.out.print(\"*\");\n
                else\n
                    System.out.print(\" \");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="C_Star_Pattern">
        <![CDATA[
public class CStarPattern \n
{\n
    public static void main(String[] args)\n
     {\n
        int size = 5; \n
        for (int i = 0; i < size; i++)\n
         {\n
            for (int j = 0; j < size; j++)\n
             {\n
                if (i == 0 || j == 0 || i == size - 1) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="D_Star_Pattern">
        <![CDATA[
public class DStarPattern\n
{\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n
        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = 0; j < size; j++) \n
            {\n
                if ((j == 0 || i == 0 || i == size - 1) && j < size - 1)\n
                \n
                 {\n
                    System.out.print(\"*\");\n
                } else if (j == size - 1 && i != 0 && i != size - 1)\n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="E_Star_Pattern">
        <![CDATA[
public class EStarPattern \n
{\n
    public static void main(String[] args)\n
    {\n
        int size = 5; \n
        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = 0; j < size; j++) \n
            {\n
                if (i == 0 || i == size - 1 || i == size / 2)\n
                 {\n
                    System.out.print(\"*\");\n
                } else if (j == 0) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="F_Star_Pattern">
        <![CDATA[
        public class FStarPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n
        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = 0; j < size; j++)\n
             {\n
                if (i == 0 || i == size / 2 || j == 0)\n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="G_Star_Pattern">
        <![CDATA[
        public class GStarPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int size = 7; \n
        for (int i = 1; i <= size; i++)
         {\n
            for (int j = 1; j <= size; j++)\n
             {\n
                if ((i == 1 || i == size) && (j > 1 && j < size)) \n
                {\n
                    System.out.print(\"*\");\n
                } else if (i > 1 && i < size && j == 1) \n
                {\n
                    System.out.print(\"*\");\n
                } else if (i == size / 2 + 1 && j >= size / 2 + 1) \n
                {\n
                    System.out.print(\"*\");\n
                } else if (i > size / 2 + 1 && j == size)\n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>
    </string>

    <string name="H_Star_Pattern">
        <![CDATA[
        public class HStarPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (j == 1 || j == size || i == size / 2 + 1)\n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="I_Star_Pattern">
        <![CDATA[
        public class IStarPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int size = 7;\n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size; j++)\n
             {\n
                if (i == 1 || i == size || j == size / 2 + 1)\n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="J_Star_Pattern">
        <![CDATA[
        public class JStarPattern \n
        {\n
    public static void main(String[] args)\n
     {\n
        int size = 7; \n
        for (int i = 1; i <= size; i++)\n
         {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (i == 1 || j == size / 2 + 1 || (i == size && j <= size / 2 + 1))\n
                \n
                 {\n
                    System.out.print(\"*\");\n
                } else if (i > size / 2 && j == 1) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="K_Star_Pattern">
        <![CDATA[
        public class KStarPattern\n
         {\n
    public static void main(String[] args) \n
    {\n
        int size = 7;\n

        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (j == 1 || (i == j && j > size / 2) || (i + j == size + 1 && j > size / 2))\n
                \n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="L_Star_Pattern">
        <![CDATA[
public class LStarPattern\n
 {\n
    public static void main(String[] args) \n
    {\n
        int size = 7; \n

        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (j == 1 || i == size) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="M_Star_Pattern">
        <![CDATA[
public class MStarPattern\n
 {\n
    public static void main(String[] args) \n
    {\n
        int size = 7; \n
        for (int i = 1; i <= size; i++)\n
         {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (j == 1 || j == size || (i == j && i <= size / 2 + 1) || (i + j == size + 1 && i <= size / 2 + 1))\n
                \n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
} \n
        ]]>
    </string>

    <string name="N_Star_Pattern">
        <![CDATA[
public class NStarPattern \n
{\n
    public static void main(String[] args)\n
     {\n
        int size = 7;\n

        for (int i = 1; i <= size; i++)\n
         {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (j == 1 || j == size || i == j) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="O_Star_Pattern">
        <![CDATA[
public class OStarPattern\n
{\n
    public static void main(String[] args) \n
    {\n
        int size = 7; \n

        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size; j++)\n
            {\n
                if ((i == 1 || i == size) && (j > 1 && j < size)) \n
                {\n
                    System.out.print(\"*\");\n
                } else if ((j == 1 || j == size) && (i > 1 && i < size))\n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>
    </string>

    <string name="P_Star_Pattern">
        <![CDATA[
public class PStarPattern\n
 {\n
    public static void main(String[] args)\n
     {\n
        int size = 7;\n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (j == 1 || ((i == 1 || i == size / 2 + 1) && j <= size / 2 + 1) || (i > 1 && i < size / 2 + 1 && j == size / 2 + 1)) \n
                \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
} \n
        ]]>
    </string>
    <string name="Q_Star_Pattern">
        <![CDATA[
 public class QStarPattern \n
 {\n
    public static void main(String[] args) \n
    {\n
        int size = 7; \n
        for (int i = 1; i <= size; i++)\n
         {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if ((i == 1 || i == size) && (j > 1 && j < size))\n
                 {\n
                    System.out.print(\"*\");\n
                } else if ((j == 1 || j == size) && (i > 1 && i < size)) \n
                {\n
                    System.out.print(\"*\");\n
                } else if (i > size / 2 && j > size / 2 && i == j) \n
                {\n
                    System.out.print(\"*\");\n
                } else if (i > size / 2 && j > size / 2 && i + j == size + 1) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="R_Star_Pattern">
        <![CDATA[
public class AlphabetRPattern\n
{\n
    public static void main(String[] args) \n
    {\n
        int size = 7; \n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (j == 1 || (i == 1 || i == size / 2 + 1) && j <= size / 2 + 1 || (i > 1 && i < size / 2 + 1 && j == size / 2 + 1) || i == j && i > size / 2 + 1) \n
                \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="S_Star_Pattern">
        <![CDATA[
public class SStarPattern \n
{\n
    public static void main(String[] args)\n
     {\n
        int size = 7;\n
        for (int i = 1; i <= size; i++)\n
        {\n
            for (int j = 1; j <= size; j++)\n
             {\n
                if ((i == 1 || i == size || i == size / 2 + 1) && j > 1 && j < size)\n
                 {\n
                    System.out.print(\"*\");\n
                } else if ((i > 1 && i < size / 2 + 1 && j == 1) || (i > size / 2 + 1 && i < size && j == size))\n
                \n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>
    </string>
    <string name="T_Star_Pattern">
        <![CDATA[
public class TStarPattern\n
 {\n
    public static void main(String[] args)\n
     {\n
        int size = 7;\n

        for (int i = 1; i <= size; i++)\n
        {\n
            for (int j = 1; j <= size; j++)\n
             {\n
                if (i == 1 || j == size / 2 + 1)\n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>
    </string>

    <string name="U_Star_Pattern">
        <![CDATA[
public class UStarPattern \n
{\n
    public static void main(String[] args)\n
     {\n
        int size = 7;\n
        for (int i = 1; i <= size; i++)\n
         {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if ((j == 1 || j == size) && i != size)\n
                 {\n
                    System.out.print(\"*\");\n
                } else if (i == size && (j > 1 && j < size))\n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="V_Star_Pattern">
        <![CDATA[
 public class VStarPattern\n
 {\n
    public static void main(String[] args) \n
    {\n
        int size = 7; \n

        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if ((i == j && i <= size / 2 + 1) || (i + j == size + 1 && i <= size / 2 + 1))\n
                \n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="W_Star_Pattern">
        <![CDATA[
public class WStarPattern\n
 {\n
    public static void main(String[] args) \n
    {\n
        int size = 7; \n
        for (int i = 1; i <= size; i++)\n
         {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (j == 1 || j == size || (i > size / 2 && (j == i || j == size - i + 1)))\n
                \n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
} \n
        ]]>
    </string>
    <string name="X_Star_Pattern">
        <![CDATA[
public class XStarPattern \n
{\n
    public static void main(String[] args)\n
     {\n
        int size = 7; \n
        for (int i = 1; i <= size; i++) \n
        {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (i == j || i + j == size + 1) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n


        ]]>
    </string>
    <string name="Y_Star_Pattern">
        <![CDATA[
public class YStarPattern\n
 {\n
    public static void main(String[] args) \n
    {\n
        int size = 7; \n
        for (int i = 1; i <= size; i++)\n
         {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if ((i <= size / 2 && (j == i || j == size - i + 1)) || (i > size / 2 && j == size / 2 + 1))\n
                 {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Z_Star_Pattern">
        <![CDATA[
 public class ZStarPattern \n
 {\n
    public static void main(String[] args)\n
    {\n
        int size = 7; \n
        for (int i = 1; i <= size; i++)\n
        {\n
            for (int j = 1; j <= size; j++) \n
            {\n
                if (i == 1 || i == size || i + j == size + 1) \n
                {\n
                    System.out.print(\"*\");\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Square_Number_Pattern">

        <![CDATA[
        public class SquareNumberPattern\n
        {\n
    public static void main(String[] args)\n
     {\n
        int n = 5; \n

        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= n; j++)\n
             {\n
                int num = i + (j - 1) * n; \n
                System.out.printf("%-4d", num); \n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="Hollow_Square_Number_Pattern">

        <![CDATA[

        public class HollowSquareNumberPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n

        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= n; j++) \n
            {\n
                if (i == 1 || i == n || j == 1 || j == n) \n
                {\n
                    int num = i + (j - 1) * n; \n
                    System.out.printf("%-4d", num); \n
                } else {\n
                    System.out.print(\"    \"); \n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>

    </string>

    <string name="Diamond_Number_Pattern">

        <![CDATA[

        public class DiamondNumberPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n
        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= n - i; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n
            for (int j = 1; j <= i; j++) \n
            {\n
             System.out.print(j + \" \");\n
            }\n
        for (int j = i - 1; j >= 1; j-\-) \n
        {\n
        System.out.print(j + \" "\);\n
         }\n
         System.out.println(); \n
        }\n
        for (int i = n - 1; i >= 1; i-\-) \n
        {\n
        for (int j = 1; j <= n - i; j++) \n
        {\n
        System.out.print(\"  \");\n
        }\n
       for (int j = 1; j <= i; j++)\n
       {\n
       System.out.print(j + \" \");\n
       }\n
       for (int j = i - 1; j >= 1; j-\-)\n
       {\n
       System.out.print(j + " \");\n
       }\n
      System.out.println();\n
        }\n
    }\n
}\n

        ]]>
    </string>

    <string name="Pyramid_Number_Pattern">
        <![CDATA[
public class PyramidNumberPattern\n
{\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n
        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= n - i; j++)\n
             {\n
                System.out.print(\"  \");\n
            }\n

            for (int j = 1; j <= i; j++)\n
            {\n
                System.out.print(j + \" \");\n
            }\n
            for (int j = i - 1; j >= 1; j-\-) \n
            {\n
                System.out.print(j + \" \");\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n

        ]]>

    </string>
    <string name="Hollow_Pyramid_Number_Pattern">

    <![CDATA[
    public class HollowPyramidNumberPattern \n
    {\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n
        for (int i = 1; i <= n; i++) \n
        {\n

            for (int j = 1; j <= n - i; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n
            for (int j = 1; j <= 2 * i - 1; j++) \n
            {\n
                if (j == 1 || j == 2 * i - 1 || i == n) \n
                {\n
                    System.out.print(j + \" \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n

    ]]>
    </string>

    <string name="Hollow_Diamond_Number_Pattern">

        <![CDATA[
        public class HollowDiamondNumberPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n
        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= n - i; j++)\n
             {\n
                System.out.print(\"  \");\n
            }\n
            for (int j = 1; j <= 2 * i - 1; j++) \n
            {\n
                if (j == 1 || j == 2 * i - 1) \n
                {\n
                    System.out.print(j + \" \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n

            System.out.println();\n
        }\n
        for (int i = n - 1; i >= 1; i-\-) \n
        {\n

            for (int j = 1; j <= n - i; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n
            for (int j = 1; j <= 2 * i - 1; j++) \n
            {\n
                if (j == 1 || j == 2 * i - 1) \n
                {\n
                    System.out.print(j + \" \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n

        ]]>


    </string>

    <string name="Right_Triangle_Number_Pattern">
        <![CDATA[
public class RightTriangleNumberPattern\n
{\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n
        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= i; j++)\n
            {\n
                System.out.print(j + \" \");\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n

        ]]>

    </string>

    <string name="Left_Triangle_Number_Pattern">
        <![CDATA[
        public class LeftTriangleNumberPattern\n
         {\n
    public static void main(String[] args)\n
    {\n
        int n = 5; \n

        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= n - i; j++) \n
            {\n
                System.out.print(\"  \"); \n
            }\n

            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(j + \" \");\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n

        ]]>

    </string>

    <string name="Reverse_Right_Triangle_Number_Pattern">
        <![CDATA[
public class ReverseRightTriangleNumberPattern \n
{\n
    public static void main(String[] args)\n
     {\n
        int n = 5;\n
        for (int i = n; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(j + \" \");\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="Hollow_Right_Triangle_Number_Pattern">
        <![CDATA[
public class HollowRightTriangleNumberPattern\n
{\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n

        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= i; j++)\n
            {\n
                if (j == 1 || j == i || i == n)\n
                 {\n
                    System.out.print(j + \" \");\n
                } else {\n

                    System.out.print(\"  \"); \n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Hollow_Reverse_Right_Triangle_Number_Pattern">

        <![CDATA[
        public class HollowReverseRightTriangle\n
        {\n
    public static void main(String[] args)\n
    {\n
        int n = 5; \n

        for (int i = n; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= i; j++)\n
            {\n
                if (j == 1 || j == i || i == n)\n
                {\n
                    System.out.print(j + \" \");\n
                } else {\n
                    System.out.print(\"  \"); \n
                }\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>


    </string>

  <string name="Floyds_Triangle_Number_Pattern">
      <![CDATA[
      public class FloydsTriangleNumberPattern\n
      {\n
    public static void main(String[] args)\n
    {\n
        int n = 5; \n
        int number = 1; \n
        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= i; j++)\n
            {\n
                System.out.print(number + \" \");\n
                number++;\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n
      ]]>
  </string>
    <string name="Pascals_Triangle_Number_Pattern">
        <![CDATA[
        public class PascalsTriangleNumberPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int n = 5;\n

        for (int i = 0; i < n; i++) \n
        {\n
            int number = 1;\n
            for (int j = 0; j <= i; j++)\n
            {\n
                System.out.print(number + \" \");\n
                number = number * (i - j) / (j + 1);\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Hollow_Floyds_Triangle_Number_Pattern">
        <![CDATA[
public class HollowFloydTriangle\n
 {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        int number = 1;\n
        int count = 1;\n
        for (int i = 1; i <= rows; i++)\n
        {\n
            for (int j = 1; j <= i; j++)\n
             {\n
                if (i == rows || j == 1 || j == i)\n
                 {\n
                    System.out.printf("%-3d", number);\n
                } else {\n
                    System.out.print(\"   \"); \n
                }\n
                number++;\n
                count++;\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Hollow_Pascals_Triangle_Number_Pattern">
        <![CDATA[
public class HollowPascalsTriangleNumberPattern\n
 {\n
    public static void main(String[] args)\n
    {\n
        int n = 5; \n

        for (int i = 0; i < n; i++)\n
         {\n
            int number = 1;\n
            for (int j = 0; j <= i; j++) \n
            {\n
                if (j == 0 || j == i) \n
                {
                    System.out.print(number + \" \");\n
                } else {\n
                    System.out.print(\"  \"); \n
                }\n
                number = number * (i - j) / (j + 1);\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Prime_Number_Pattern">
        <![CDATA[
public class PrimeNumberPattern \n
{\n
    public static void main(String[] args)\n
    {\n
        int n = 5;\n
        int[][] matrix = new int[n][n];\n

        int count = 0;\n
        int num = 2;\n

        while (count < n * n)\n
        {
            if (isPrime(num)) \n
            {
                matrix[count / n][count % n] = num;\n
                count++;\n
            }\n
            num++;\n
        }\n


        for (int i = 0; i < n; i++)\n
        {\n
            for (int j = 0; j < n; j++) \n
            {\n
                System.out.print(matrix[i][j] + \" \");\n
            }\n
            System.out.println();\n
        }\n
    }\n
    public static boolean isPrime(int num) \n
    {\n
        if (num <= 1) \n
        {\n
            return false;\n
        }\n

        for (int i = 2; i <= Math.sqrt(num); i++)\n
        {\n
            if (num % i == 0)\n
             {\n
                return false;\n
            }\n
        }\n

        return true;\n
    }\n
}\n
        ]]>
    </string>

    <string name="Fibonacci_Number_Pattern">
        <![CDATA[

public class FibonacciNumberPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n

        int a = 0, b = 1;\n

        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(a + \" \");\n
                int sum = a + b;\n
                a = b;\n
                b = sum;\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="Even_Number_Pattern">
       <![CDATA[
public class EvenNumberPattern\n
 {\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n

        int evenNumber = 2;\n

        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(evenNumber + \" \");\n
                evenNumber += 2;\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n

       ]]>
    </string>
    <string name="Odd_Number_Pattern">
        <![CDATA[
        public class EvenNumberPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n
        int count = 1; \n

        for (int i = 1; i <= n; i++)\n
         {\n
            for (int j = 1; j <= i; j++)\n
            {\n
                System.out.print(count + \" \");\n
                count += 2; \n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Palindrome_Number_Pattern">
        <![CDATA[
        public class PalindromeNumberPattern\n
        {\n
    public static void main(String[] args) \n
    {\n
        int n = 5;\n
        for (int i = 1; i <= n; i++) \n
        {\n
            int num = 1; \n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(num + \" \");\n
                num++;\n
            }\n
            for (int j = i - 1; j >= 1; j-\-) \n
            {\n
                System.out.print(j + \" \");\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n

        ]]>
    </string>

    <string name="Armstrong_Number_Pattern">
        <![CDATA[
public class ArmstrongNumberPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n

        int start = 1;\n
        int end = 500;\n
        int count = 0;\n
        for (int number = start; number <= end; number++)\n
         {\n
            int sum = 0;\n
            int temp = number;\n
            int numDigits = getNumberOfDigits(temp);\n

            while (temp != 0) \n
            {\n
                int digit = temp % 10;\n
                sum += Math.pow(digit, numDigits);\n
                temp /= 10;\n
            }\n

            if (number == sum) \n
            {\n
                System.out.printf("%-5d", number);\n
                count++;\n

                if (count % rows == 0)\n
                 {\n
                    System.out.println();\n
                }\n
            }\n
        }\n
    }\n
    private static int getNumberOfDigits(int number)\n
     {\n
        int count = 0;\n
        while (number != 0) \n
        {\n
            number /= 10;\n
            count++;\n
        }\n
        return count;\n
    }\n
}\n

        ]]>
    </string>

    <string name="Perfect_Number_Pattern">
        <![CDATA[
        public class PerfectNumberPattern\n
        {\n
    public static void main(String[] args)\n
     {\n
        int rows = 5; \n

        int count = 0;\n
        int number = 1;\n

        while (count < rows) \n
        {\n
            int sum = 0;\n

            for (int i = 1; i < number; i++) \n
            {\n
                if (number % i == 0) \n
                {\n
                    sum += i;\n
                }\n
            }\n

            if (number == sum)\n
             {\n
                System.out.printf("%-5d", number);\n
                count++;\n
            }\n

            number++;\n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="Abundant_Number_Pattern">
        <![CDATA[
public class AbundantNumberPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n

        int count = 0;\n
        int number = 12; \n
        while (count < rows)\n
        {\n
            int sum = getSumOfProperDivisors(number);\n

            if (sum > number)\n
             {
                System.out.printf("%-5d", number);\n
                count++;\n
            }\n

            number++;\n
        }\n
    }\n
    private static int getSumOfProperDivisors(int number) \n
    {\n
        int sum = 1; \n
        for (int i = 2; i * i <= number; i++) \n
        {\n
            if (number % i == 0)\n
             {\n
                sum += i;\n
                if (i != number / i) \n
                    sum += number / i;\n
                }\n
            }\n
        }\n

        return sum;\n
    }\n
}\n
        ]]>
    </string>

    <string name="Deficient_Number_Pattern">
        <![CDATA[
        public class DeficientNumberPattern\n
        {\n
    public static void main(String[] args)\n
     {\n
        int rows = 5;\n

        int count = 0;\n
        int number = 1;\n

        while (count < rows) \n
        {
            int sum = getSumOfProperDivisors(number);\n

            if (sum < number) \n
            {
                System.out.printf("%-5d", number);\n
                count++;\n
            }\n

            number++;\n
        }\n
    }\n

    private static int getSumOfProperDivisors(int number) \n
    {\n
        int sum = 1; \n
        for (int i = 2; i * i <= number; i++) \n
        {\n
            if (number % i == 0) \n
            {\n
                sum += i;\n
                if (i != number / i) \n
                { \n
                    sum += number / i;\n
                }\n
            }\n
        }\n

        return sum;\n
    }\n
    }\n
        ]]>
    </string>

    <string name="Harshad_Number_Pattern">
        <![CDATA[
        public class HarshadNumberPattern\n
        {\n
    public static void main(String[] args)\n
     {\n
        int rows = 5; \n

        int count = 0;\n
        int number = 1;\n

        while (count < rows)\n
         {\n
            if (number % getSumOfDigits(number) == 0)\n
            {\n
                System.out.printf("%-5d", number);\n
                count++;\n
            }\n

            number++;\n
        }\n
    }\n

    private static int getSumOfDigits(int number) \n
    {\n
        int sum = 0;\n

        while (number != 0) \n
        {\n
            sum += number % 10;\n
            number /= 10;\n
        }\n

        return sum;\n
    }\n
}\n
        ]]>

    </string>

    <string name="Neon_Number_Pattern">
        <![CDATA[
        public class NeonNumberPattern\n
        {\n
    public static void main(String[] args)\n
     {\n
        int rows = 5;\n

        int count = 0;\n
        int number = 0;\n

        while (count < rows)\n
        {\n
            if (isNeonNumber(number)) \n
            {\n
                System.out.printf("%-5d", number);\n
                count++;\n
                if (count % 5 == 0) \n
                {\n
                    System.out.println();\n
                }\n
            }\n

            number++;\n
        }\n
    }\n

    private static boolean isNeonNumber(int number)\n
     {\n
        int square = number * number;\n
        int sumOfDigits = 0;\n

        while (square != 0) \n
        {\n
            sumOfDigits += square % 10;\n
            square /= 10;\n
        }\n

        return sumOfDigits == number;\n
    }\n
}\n
        ]]>
    </string>

    <string name="Happy_Number_Pattern">
        <![CDATA[
        public class HappyNumberPattern\n
         {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n

        int count = 0;\n
        int number = 1;\n

        while (count < rows) \n
        {\n
            if (isHappyNumber(number)) \n
            {\n
                System.out.printf("%-5d", number);\n
                count++;\n
                if (count % 5 == 0) \n
                {\n
                    System.out.println();\n
                }\n
            }\n

            number++;\n
        }\n
    }\n

    private static boolean isHappyNumber(int number) \n
    {\n
        while (number != 1 && number != 4)\n
         {\n
            int sumOfSquares = 0;\n

            while (number != 0) \n
            {\n
                int digit = number % 10;\n
                sumOfSquares += digit * digit;\n
                number /= 10;\n
            }\n

            number = sumOfSquares;\n
        }\n

        return number == 1;\n
    }\n
}\n
        ]]>
    </string>

    <string name="Magic_Number_Pattern">
        <![CDATA[
        public class MagicNumberPattern \n
        {\n
    public static void main(String[] args)\n
     {\n
        int rows = 5; \n
        int count = 0;\n
        int number = 1;\n

        while (count < rows) \n
        {\n
            if (isMagicNumber(number)) \n
            {\n
                System.out.printf("%-5d", number);\n
                count++;\n
                if (count % 5 == 0) \n
                {\n
                    System.out.println();\n
                }\n
            }\n

            number++;\n
        }\n
    }\n

    private static boolean isMagicNumber(int number) \n
    {\n
        int sum = 0;\n

        while (number > 9) \n
        {\n
            while (number != 0) \n
            {\n
                int digit = number % 10;\n
                sum += digit;\n
                number /= 10;\n
            }\n

            number = sum;\n
            sum = 0;\n
        }\n

        return number == 1;\n
    }\n
}\n

        ]]>
    </string>
    <string name="Catalan_Number_Pattern">
        <![CDATA[

        public class CatalanNumberPattern\n
        {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        for (int i = 0; i < rows; i++) \n
        {\n
            for (int j = 0; j <= i; j++) \n
            {\n
                System.out.printf("%-5d", calculateCatalanNumber(j));\n
            }\n
            System.out.println();\n
        }\n
    }\n

    private static int calculateCatalanNumber(int n)\n
    {\n
        if (n <= 1) \n
        {\n
            return 1;\n
        }\n

        int catalan = 0;\n
        for (int i = 0; i < n; i++) \n
        {\n
            catalan += calculateCatalanNumber(i) * calculateCatalanNumber(n - i - 1);\n
        }\n

        return catalan;\n
    }\n
}\n

]]>
    </string>

    <string name="Bell_Number_Pattern">
        <![CDATA[
public class BellNumberPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n

        for (int i = 0; i < rows; i++) \n
        {\n
            for (int j = 0; j <= i; j++)\n
             {\n
                System.out.printf("%-5d", calculateBellNumber(i, j));\n
            }\n
            System.out.println();\n
        }\n
    }\n

    private static int calculateBellNumber(int n, int k) \n
    {\n
        int[][] bellTriangle = new int[n + 1][n + 1];\n
        bellTriangle[0][0] = 1;\n

        for (int i = 1; i <= n; i++)\n
         {\n
            bellTriangle[i][0] = bellTriangle[i - 1][i - 1];\n

            for (int j = 1; j <= i; j++) \n
            {\n
                bellTriangle[i][j] = bellTriangle[i - 1][j - 1] + bellTriangle[i][j - 1];\n
            }\n
        }\n

        return bellTriangle[n][k];\n
    }\n
}\n
        ]]>
    </string>

    <string name="Triangular_Number_Pattern">
        <![CDATA[
        public class TriangularNumberPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n

        for (int i = 1; i <= rows; i++) \n
        {\n
            for (int j = 1; j <= i; j++)\n
            {\n
                int number = getTriangularNumber(i, j);\n
                System.out.printf("%-5d", number);\n
            }\n
            System.out.println();\n
        }\n
    }\n

    private static int getTriangularNumber(int row, int column) \n
    {\n
        return (row * (row - 1) / 2) + column;\n
    }\n
}\n

        ]]>
    </string>

    <string name="Pentagonal_Number_Pattern">
        <![CDATA[
public class PentagonalNumberPattern \n
{\n
    public static void main(String[] args)\n
     {\n
        int n = 5;\n

        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                int pentagonalNum = getPentagonalNumber(j);\n
                System.out.print(pentagonalNum + " ");\n
            }\n
            System.out.println(); \n
        }\n
    }\n


    public static int getPentagonalNumber(int n) \n
    {\n
        return n * (3 * n - 1) / 2;\n
    }\n
}\n
        ]]>
    </string>

    <string name="Amicable_Number_Pattern">
        <![CDATA[
public class AmicableNumberPattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int rows = 5;\n
        int count = 0;\n
        int number = 1;\n
        while (count < rows)\n
        {\n
            int sum1 = getSumOfProperDivisors(number);\n
            int sum2 = getSumOfProperDivisors(sum1);\n
            if (number != sum1 && number == sum2)\n
             {\n
                System.out.printf("%-10d%-10d\n", number, sum1);\n
                count++;\n
            }\n
            number++;\n
        }\n
    }\n
    private static int getSumOfProperDivisors(int number) \n
    {\n
        int sum = 1;\n

        for (int i = 2; i <= Math.sqrt(number); i++)\n
        {\n
            if (number % i == 0) \n
            {\n
                sum += i;\n


                if (i != number / i) \n
                {\n
                    sum += number / i;\n
                }\n
            }\n
        }\n

        return sum;\n
    }\n
}\n
        ]]>
    </string>
    <string name="Pronic_Number_Pattern">
        <![CDATA[
public class PronicNumberPattern\n
{\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n

        int count = 0;\n
        int number = 1;\n

        while (count < rows) \n
        {\n
            if (isPronicNumber(number)) \n
            {\n
                System.out.printf("%-10d", number);\n
                count++;\n
                if (count % 5 == 0) \n
                {\n
                    System.out.println();\n
                }\n
            }\n
            number++;\n
        }\n
    }\n

    private static boolean isPronicNumber(int number) \n
    {\n
        int sqrt = (int) Math.sqrt(number);\n
        return sqrt * (sqrt + 1) == number;\n
    }\n
}\n

        ]]>
    </string>
    <string name="Lucas_Number_Pattern">
        <![CDATA[
public class LucasNumberPattern\n
 {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n

        int count = 0;\n
        int n1 = 2; \n
        int n2 = 1; \n

        while (count < rows) \n
        {\n
            System.out.printf("%-10d", n1);\n
            count++;\n
            if (count % 5 == 0) \n
            {\n
                System.out.println();\n
            }\n

            int nextLucas = n1 + n2;\n
            n1 = n2;\n
            n2 = nextLucas;\n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="Half_Diamond_Number_Pattern">
        <![CDATA[
public class HalfDiamondNumberPattern \n
{\n
    public static void main(String[] args)\n
    {\n
        int n = 5; \n
        for (int i = 1; i <= n; i++)\n
        {\n
            for (int j = 1; j <= i; j++)\n
            {\n
                System.out.print(j + \" \");\n
            }\n
            System.out.println();\n
        }\n
        for (int i = n - 1; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(j + \" \");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>

<string name="Hollow_Half_Diamond_Number_Pattern">
    <![CDATA[
public class HollowLeftHalfDiamond\n
{\n
    public static void main(String[] args)\n
    {\n
        int n = 5;\n
        for (int i = 1; i <= n; i++)\n
        {\n
            for (int j = 1; j <= i; j++)\n
            {\n
                if (j == 1 || j == i)\n
                {\n
                    System.out.print(j + \" \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
        for (int i = n - 1; i >= 1; i-\-)\n
        {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i)\n
                 {\n
                    System.out.print(j + \" \");\n
                } else {\n
                    System.out.print(\"  \"); \n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
    ]]>
</string>
    <string name="Right_Half_Diamond_Number_Pattern">
        <![CDATA[
public class RightHalfDiamond\n
{\n
    public static void main(String[] args)\n
    {\n
        int n = 5; \n
        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= n - i; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n
            for (int j = 1; j <= i; j++)\n
             {\n
                System.out.print(j + \" \");\n
            }\n
            System.out.println();\n
        }\n
        for (int i = n - 1; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= n - i; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n
            for (int j = 1; j <= i; j++)\n
            {\n
                System.out.print(j + \" \");\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Hollow_Right_Half_Diamond_Number_Pattern">
        <![CDATA[
        public class HollowRightHalfDiamond\n
        {\n
    public static void main(String[] args)\n
     {\n
        int n = 5; \n
        for (int i = 1; i <= n; i++)\n
         {\n
            for (int j = 1; j <= n - i; j++)\n
            {\n
                System.out.print(\"  \"); \n
            }\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i) \n
                {\n
                    System.out.print(j + \" \");\n
                } else {\n
                    System.out.print(\"  \"); \n
                }\n
            }\n
            System.out.println();\n
        }\n
        for (int i = n - 1; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= n - i; j++)\n
             {\n
                System.out.print(\"  \"); \n
            }\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i) \n
                {\n
                    System.out.print(j + \" \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>
    </string>
    <string name="Square_Alphabet_Pattern">
       <![CDATA[
       public class SquareAlphabetPattern \n
       {\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n
        char startChar = \'A\'; \n

        for (int i = 0; i < size; i++) \n
        {\n
            for (int j = 0; j < size; j++)\n
             {\n
                char ch = (char) (startChar + j + i);\n
                System.out.print(ch + \" \");\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n
       
       ]]>
    </string>

    <string name="Hollow_Square_Alphabet_Pattern">
        <![CDATA[
public class HollowSquareAlphabetPattern\n
 {\n
    public static void main(String[] args) \n
    {\n
        int size = 5; \n
        char startChar = \'A\'; \n

        for (int i = 0; i < size; i++)\n
         {\n
            for (int j = 0; j < size; j++) \n
            {\n
                if (i == 0 || i == size - 1 || j == 0 || j == size - 1) \n
                {\n
                    char ch = (char) (startChar + Math.abs(j - i));\n
                    System.out.print(ch + \" \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="Right_Triangle_Alphabet_Pattern">
        <![CDATA[
        public class RightTriangleAlphabetPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        char startChar = \'A\'; \n

        for (int i = 0; i < rows; i++) \n
        {\n
            for (int j = 0; j <= i; j++)\n
             {\n
                char ch = (char) (startChar + j);\n
                System.out.print(ch + \" \");\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Hollow_Right_Triangle_Alphabet">
        <![CDATA[
        public class RightTriangleHollowAlphabetPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        char startChar = \'A\'; \n
        for (int i = 0; i < rows; i++) \n
        {\n
            for (int j = 0; j <= i; j++) \n
            {
                if (i == j || j == 0 || i == rows - 1)\n
                 {\n
                    char ch = (char) (startChar + j);\n
                    System.out.print(ch + \" \");\n
                } else {\n
                    System.out.print(\"  \"); \n
                }\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="Inverted_Right_Triangle_Alphabet">
        <![CDATA[
        public class RightTriangleAlphabetPattern\n
         {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        char  Char = \'A\'; \n

        for (int i = 0; i < rows; i++)\n
         {\n
            for (int j = rows - i; j > 0; j-\-) \n
            {\n
                char ch = (char) (Char + (rows - j));\n
                System.out.print(ch + \" \");\n
            }\n
            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="Hollow_Inverted_Right_Triangle_Alphabet">
        <![CDATA[
        public class HollowInvertedRightTriangleAlphabetPattern\n
        {\n
    public static void main(String[] args)\n
     {\n
        int rows = 5;\n
        char Char = \'A\';\n

        for (int i = 0; i < rows; i++) \n
        {\n
            for (int j = 0; j < rows - i; j++)\n
             {\n
                if (i == 0 || i == rows - 1 || j == 0 || j == rows - i - 1) \n
                {\n
                    char ch = (char) (Char + j);\n
                    System.out.print(ch + \" \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Left_Triangle_Alphabet">
        <![CDATA[
        public class LeftTriangle\n
        {\n
    public static void main(String[] args) \n
    {
        int rows = 5; \n
        char Char = \'A\'; \n
        for (int i = 0; i < rows; i++) \n
        {\n

            for (int j = 0; j < rows - i - 1; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n

            for (int k = 0; k <= i; k++) \n
            {\n
                char ch = (char) (Char + k);\n
                System.out.print(ch + \" \");\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="Hollow_Left_Triangle_Alphabet">
        <![CDATA[
        public class HollowLeftTriangle\n

        {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        char Char = \'A\'; \n

        for (int i = 0; i < rows; i++) \n
        {\n
            for (int j = 0; j < rows - i - 1; j++) \n
            {\n
                System.out.print(\"  \");\n
            } \n
            for (int k = 0; k <= i; k++)\n
             {\n
                if (k == 0 || k == i || i == rows - 1)\n
                 {\n
                    char ch = (char) (Char + k);\n
                    System.out.print(ch + \" \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Inverted_Left_Triangle_Alphabet">
        <![CDATA[
        public class InvertedLeftTriangle\n
         {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        char Char = \'A\'; \n

        for (int i = 0; i < rows; i++) \n
        {\n

            for (int j = 0; j < i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n

            for (int k = 0; k < rows - i; k++)\n
             {\n
                char ch = (char) (Char + k);\n
                System.out.print(ch);\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Hollow_Inverted_Left_Triangle_Alphabet">
        <![CDATA[
        public class HollowInvertedLeftTriangle\n
        {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        int spaces = 0; \n
        char Char = \'A\'; \n
        for (int i = rows; i >= 1; i-\-)\n
         {\n

            for (int j = 1; j <= spaces; j++)\n
             {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 1; k <= i; k++)\n
             {\n
                if (k == 1 || k == i || i == rows)\n
                 {\n
                    char ch = (char) (Char + (k - 1));\n
                    System.out.print(ch);\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n

            System.out.println(); \n
            spaces++; \n
        }\n
    }\n
}\n

        ]]>
    </string>
    <string name="Pyramid_Alphabet_Pattern">
        <![CDATA[
        public class PyramidAlphabeticPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        char startChar = \'A\'; \n

        for (int i = 1; i <= rows; i++) \n
        {\n
            for (int j = 1; j <= rows - i; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n
            for (int k = 1; k <= i; k++) \n
            {\n
                char ch = (char) (startChar + k - 1);\n
                System.out.print(ch + \" \");\n
            }\n
            for (int k = i - 1; k >= 1; k-\-) \n
            {\n
                char ch = (char) (startChar + k - 1);\n
                System.out.print(ch + \" \");\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n

        ]]>
    </string>
    <string name="Hollow_Pyramid_Alphabet_Pattern">
        <![CDATA[
        public class HollowPyramidAlphabeticPattern\n
         {\n
    public static void main(String[] args)\n
     {\n
        int rows = 5; \n
        char startChar = \'A\'; \n

        for (int i = 1; i <= rows; i++) \n
        {\n

            for (int j = 1; j <= rows - i; j++)\n
            {\n
                System.out.print(\"  \");\n
            }\n
            for (int k = 1; k <= i; k++) \n
            {\n
                if (k == 1 || k == i || i == rows) \n
                {\n
                    char ch = (char) (startChar + k - 1);\n
                    System.out.print(ch +\ " \");\n
                } else {\n
                    System.out.print(\"  \n");\n
                }\n
            }\n


            for (int k = i - 1; k >= 1; k-\-) \n
            {\n
                if (k == 1 || k == i || i == rows)\n
                 {\n
                    char ch = (char) (startChar + k - 1);\n
                    System.out.print(ch + \" \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n

            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Reverse_Pyramid_Alphabet_Pattern">
        <![CDATA[
        public class ReversedPyramidAlphabeticPattern \n
        {\n
    public static void main(String[] args)\n
     {\n
        int rows = 5; \n
        char startChar = \'A\'; \n

        for (int i = rows; i >= 1; i-\-) \n
        {\n

            for (int j = 1; j <= rows - i; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n


            for (int k = i; k >= 1; k-\-) \n
            {\n
                char ch = (char) (startChar + k - 1);\n
                System.out.print(ch + \" \");\n
            }\n


            for (int k = 2; k <= i; k++) \n
            {\n
                char ch = (char) (startChar + k - 1);\n
                System.out.print(ch + \" \");\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Hollow_Reverse_Pyramid_Alphabet_Pattern">
        <![CDATA[
        public class HollowAlphabeticReversePyramid\n
         {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        char startChar = \'E\'; \n

        for (int i = rows; i >= 1; i-\-) \n
        {\n

            for (int j = 1; j <= rows - i; j++)\n
             {\n
                System.out.print(\"  \");\n
            }\n
            for (int k = 1; k <= 2 * i - 1; k++) \n
            {\n
                if (k == 1 || k == 2 * i - 1 || i == rows) \n
                {\n
                    char ch = (char) (startChar - (i - 1));\n
                    System.out.print(ch + \" \");\n
                } else {\n
                    System.out.print(\"  \");\n
                }\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n

        ]]>
    </string>
    <string name="Triangle_Alphabet_Pattern">
        <![CDATA[
public class AlphabeticTrianglePattern \n
{\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        char startChar = \'A\'; \n

        for (int i = 1; i <= rows; i++) \n
        {\n

            for (int j = 1; j <= rows - i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n


            for (int k = 1; k <= i; k++)\n
             {\n
                char ch = (char) (startChar + k - 1);\n
                System.out.print(ch + \" \");\n
            }\n

            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Hollow_Triangle_Alphabet_Pattern">
        <![CDATA[]
        public class HollowAlphabeticTriangle\n
        {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        char startChar = \'A\'; \n

        for (int i = 1; i <= rows; i++)\n
         {\n

            for (int j = 1; j <= rows - i; j++)\n
             {\n
                System.out.print(\" \");\n
            }\n


            for (int k = 1; k <= 2 * i - 1; k++)\n
             {\n
                if (k == 1 || k == 2 * i - 1 || i == rows) \n
                {\n
                    char ch = (char) (startChar + k - 1);\n
                    System.out.print(ch);\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Diamond_Alphabet_Pattern">
        <![CDATA[
        public class DiamondAlphabetic\n
         {\n
    public static void main(String[] args)\n
     {\n
        int rows = 5;\n
        char startChar = \'A\';\n
        for (int i = 1; i <= rows; i++) \n
        {\n

            for (int j = 1; j <= rows - i; j++)\n
             {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 1; k <= i; k++)\n
             {\n
                char ch = (char) (startChar + k - 1);\n
                System.out.print(ch + \" \");\n
            }\n

            System.out.println();\n
        }\n

        for (int i = rows - 1; i >= 1; i-\-) \n
        {\n

            for (int j = 1; j <= rows - i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 1; k <= i; k++)\n
             {\n
                char ch = (char) (startChar + k - 1);\n
                System.out.print(ch + \" \");\n
            }\n

            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Hollow_Diamond_Alphabet_Pattern">
        <![CDATA[
        public class HollowDiamondAlphabetic\n
         {\n
    public static void main(String[] args)\n
     {\n
        int rows = 5; \n
        char startChar = \'A\'; \n

        for (int i = 1; i <= rows; i++)\n
         {\n

            for (int j = 1; j <= rows - i; j++)\n
             {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 1; k <= 2 * i - 1; k++) \n
            {\n
                if (k == 1 || k == 2 * i - 1)\n
                 {\n
                    char ch = (char) (startChar + i - 1);\n
                    System.out.print(ch);\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n

            System.out.println(); \n
        }\n


        for (int i = rows - 1; i >= 1; i-\-) \n
        {\n

            for (int j = 1; j <= rows - i; j++)\n
             {\n
                System.out.print(\" ");\n
            }\n
            for (int k = 1; k <= 2 * i - 1; k++) \n
            {\n
                if (k == 1 || k == 2 * i - 1) \n
                {\n
                    char ch = (char) (startChar + i - 1);\n
                    System.out.print(ch);\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Half_Diamond_Alphabet_Pattern">
        <![CDATA[
        public class HalfDiamondAlphabeticPattern \n
        {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        char startChar = \'A\';\n

        for (int i = 1; i <= rows; i++)\n
         {\n

            for (int k = 1; k <= i; k++)\n
             {\n
                char ch = (char) (startChar + k - 1);\n
                System.out.print(ch + \" \");\n
            }\n
        }\n
        for (int i = rows - 1; i >= 1; i-\-) \n
        {\n
            for (int k = 1; k <= i; k++) \n
            {\n
                char ch = (char) (startChar + k - 1);\n
                System.out.print(ch + \" \");\n
            }\n

            System.out.println(); \n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="Hollow_Half_Diamond_Alphabet">
        <![CDATA[
        public class AlphabetPattern\n
         {\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n
        char currentChar = \'A\';\n

        for (int i = 1; i <= n; i++)\n
         {\n
            for (int j = 1; j <= i; j++) \n
            {\n
                if (j == 1 || j == i)\n
                 {\n
                    System.out.print(currentChar);\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            currentChar++;\n
            System.out.println();\n
        }\n

        for (int i = n - 1; i >= 1; i-\-)\n
         {\n
            for (int j = 1; j <= i; j++)\n
             {\n
                if (j == 1 || j == i)\n
                 {\n
                    System.out.print(currentChar);\n
                } else {\n
                    System.out.print(\" \");\n
                }\n
            }\n
            currentChar++;\n
            System.out.println();\n
        }\n
    }\n
}\n

        ]]>
    </string>
    <string name="Left_Half_Diamond_Alphabet">
        <![CDATA[
        public class LeftHalfAlphabet\n
         {\n
    public static void main(String[] args)\n
     {\n
        int n = 5;\n
        char currentChar = \'A\';\n
        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= n - i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 1; k <= i; k++) \n
            {\n
                System.out.print(currentChar);\n
                currentChar++;\n
            }\n
            System.out.println();\n
        }\n
        currentChar-\-;\n
        for (int i = n - 1; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j <= n - i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 1; k <= i; k++)\n
             {\n
                System.out.print(currentChar);\n
                currentChar++;\n
            }\n
            currentChar -= 2;\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Rhombus_Alphabet_Pattern">
        <![CDATA[
        public class AlphabetPattern \n
        {\n
    public static void main(String[] args)\n
     {\n
        int n = 6; \n
        char currentChar = \'A\';\n

        for (int i = 1; i <= n; i++) \n
        {\n
            for (int j = 1; j <= n - i; j++) \n
            {\n
                System.out.print(\" \");\n
            }\n
            for (int k = 1; k <= n; k++) \n
            {\n
                System.out.print(currentChar);\n
            }\n
            currentChar++;\n
            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Sandglass_Alphabet_Pattern">
        <![CDATA[
        public class AlphabeticPattern\n
         {\n
    public static void main(String[] args) \n
    {\n
        int rows = 5; \n
        char startChar = \'A\'; \n
        for (int i = 1; i <= rows; i++)\n
         {\n

            for (int j = 1; j < i; j++)\n
             {\n
                System.out.print(\" \");\n
            }\n

            for (int k = i; k <= rows; k++)\n
             {\n
                System.out.print(startChar + \" \");\n
            }\n

            System.out.println(); \n
            startChar++; \n
        }\n
        for (int i = rows - 1; i >= 1; i-\-) \n
        {\n
            for (int j = 1; j < i; j++)\n
             {\n
                System.out.print(\" \");\n
            }\n
            for (int k = i; k <= rows; k++) \n
            {\n
                System.out.print(startChar + \" \");\n
            }\n

            System.out.println();\n
            startChar++; \n
        }\n
    }\n
}\n
        ]]>

    </string>
    <string name="Left_K_Alphabet_Pattern">
        <![CDATA[
        public class leftKAlphabet\n
        {\n
    public static void main(String[] args) \n
    {\n
        int n = 5; \n
        char currentChar = \'A\';\n

        for (int i = 1; i <= n; i++)\n
         {\n

            for (int j = 1; j < i; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n

            for (int j = i; j <= n; j++) \n
            {\n
                System.out.print(currentChar + \" \");\n
                currentChar++;\n
            }\n

            System.out.println();\n
        }\n

        for (int i = n - 1; i >= 1; i-\-) \n
        {

            for (int j = 1; j < i; j++) \n
            {\n
                System.out.print(\"  \");\n
            }\n

            for (int j = i; j <= n; j++) \n
            {\n
                System.out.print(currentChar + \" \");\n
                currentChar++;\n
            }\n

            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="k_Shape_Alphabet_Pattern">
        <![CDATA[
        import java.util.Scanner;\n

public class KShapeAlphabetPattern\n
{\n
public static void main(String[] args)\n
{\n
for (int i = 5; i >= 0; i-\-)\n
{\n
   int alphabet = 65;\n
   for (int j = 0; j <= i; j++)\n
   {\n
       System.out.print((char) (alphabet + j) + \" \");\n
   }\n
   System.out.println();\n
}\n
for (int i = 0; i<= 5; i++)\n
{\n
   int alphabet = 65;\n
   for (int j = 0; j <= i; j++)\n
   {\n
       System.out.print((char) (alphabet + j) + \" \");\n
   }\n
   System.out.println();n
}\n
}\n
}\n
        ]]>
    </string>
    <string name="ButterFly_Alphabetic_Pattern">
        <![CDATA[
        public class AlphabeticPattern\n
         {\n
    public static void main(String[] args) \n
    {\n
        int n = 6; \n
        char currentChar = \'A\';\n

        for (int i = 1; i <= n; i++)\n
         {\n

            for (int j = 1; j <= i; j++) \n
            {\n
                System.out.print(currentChar);\n
                currentChar++;\n
            }\n

            for (int j = 1; j <= 2 * (n - i); j++)\n
             {\n
                System.out.print(\" \");\n
            }\n

            for (int j = 1; j <= i; j++)\n
             {\n
                currentChar-\-;
                System.out.print(currentChar);\n
            }\n

            System.out.println();\n
        }\n
        for (int i = n - 1; i >= 1; i-\-)\n
         {\n

            for (int j = 1; j <= i; j++)\n
             {\n
                System.out.print(currentChar);\n
                currentChar++;\n
            }\n
            for (int j = 1; j <= 2 * (n - i); j++) \n
            {\n
                System.out.print(\" \");\n
            }\n

            for (int j = 1; j <= i; j++)\n
             {\n
                currentChar-\-;\n
                System.out.print(currentChar);\n
            }\n

            System.out.println();\n
        }\n
    }\n
}\n
        ]]>
    </string>





    // Fragment 2

    <string name="Positive_or_Negative_number">
        <![CDATA[
        class Main\n
{\n
  public static void main (String[]args)\n
  {\n

    int num = 5;\n

    //Conditions to check if the number is negative or positive\n
    \n
    if (num > 0)\n
        System.out.println (\"The number is positive\");\n
    else if (num < 0)\n
        System.out.println (\"The number is negative\");\n
    else\n
        System.out.println ("Zero");\n
  }\n
}\n
        ]]>
    </string>

    <string name="Even_or_Odd_number">
        <![CDATA[
        public class Main\n
 {\n
      public static void main(String[] args)\n
      {\n
           int number = 29;\n


     //checking whether the number is even or odd\n

     if (number % 2 == 0)\n
              System.out.println(number + \" is Even\");\n
     else\n
              System.out.println(number + \" is odd\");\n
      }\n
 }\n
        ]]>
    </string>

    <string name="Sum_of_First_N_Natural_numbers">
        <![CDATA[
        public class Main\n
 {\n
   public static void main (String[]args)\n
   {\n

     int n = 10;\n
     int sum = 0;\n

     for (int i = 1; i <= n; i++)\n
         sum += i;\n
       System.out.println (sum);\n
   }\n
 }\n

        ]]>
    </string>

    <string name="Sum_of_N_natural_numbers">
        <![CDATA[
        public class Main\n
 {\n
   public static void main (String[]args)\n
   {\n

     int n = 10;\n
     int sum = 0;\n

     for (int i = 1; i <= n; i++)\n
         sum += i;\n
       System.out.println (sum);\n
   }\n
 }\n
        ]]>
    </string>

    <string name="Sum_of_numbers_in_a_given_range">
        <![CDATA[

        public class Main\n
{\n
  public static void main (String[]args)\n
  {\n
    int a = 5;\n
    int b = 10;\n

    int sum = 0;\n

    for (int i = a; i <= b; i++)\n
        sum = sum + i;\n
      System.out.println (\"The sum is \" + sum);\n
  }\n
}\n

        ]]>
    </string>

    <string name="Greatest_of_two_numbers">
        <![CDATA[
        public class Main\n
 {\n
   public static void main (String[]args)\n
   {\n

     int num1 = 50, num2 = 20;\n
     if (num1 == num2)\n
       System.out.println (\"both are equal\");\n
     else if (num1 > num2)\n
         System.out.println (num1 + \" is greater\");\n

     else\n
         System.out.println (num2 + \" is greater\");\n

   }\n
 }\n
        ]]>
    </string>

    <string name="Greatest_of_the_Three_numbers">
       <![CDATA[
       public class Main\n
{\n
  public static void main (String[]args)\n
  {\n

    int num1 = 10, num2 = 20, num3 = 30;\n

    //checking if num1 is greatest\n
    \n
    if (num1 >= num2 && num1 >= num3)\n
    \n
        System.out.println (num1 + \" is the greatest\");\n
        \n

    //checking if num2 is greatest\n
    \n
    else if (num2 >= num1 && num2 >= num3)\n
    \n
        System.out.println (num2 + \" is the greatest\");\n
        \n

    //checking if num2 is greatest\n
    \n
    else if (num3 >= num1 && num3 >= num2)\n
    \n
        System.out.println (num3 + \" is the greatest\");\n

  }\n
}\n
       ]]>
    </string>

    <string name="Leap_year_or_not">
        <![CDATA[

 // Leap year program in Java\n
// If the year satisfies either of the conditions, it\'s considered a leap year \n
// 1. The year must be divisible by 400.\n
// 2. The year must be divisible by 4 but not 100.\n
\n


public class Main\n
{\n
   public static void main (String[]args)\n
   {\n

     int year = 2020;\n

     if (year % 400 == 0)\n
       System.out.println (year + \" is a Leap Year\");\n

     else if (year % 4 == 0 && year % 100 != 0)\n
       System.out.println (year + \" is a Leap Year\");\n

     else\n
         System.out.println (year + \" is not a Leap Year\");\n

   }\n
 }\n

        ]]>

    </string>

    <string name="Prime_number">
        <![CDATA[
        public class Main\n
{\n
  public static void main (String[]args)\n
  {\n
    int n = 23;
      checkPrime (n);\n
  }\n

  private static void checkPrime (int n)\n
  {\n
    int count = 0;\n

    // negative numbers, 0 and 1 are not prime\n
    if (n < 2)\n
      {\n
	System.out.println (\"The given is number \" + n + \" is not prime\");\n
	System.exit (0);\n
      }\n
    // checking the number of divisors b/w [1, n]\n
    for (int i = 1; i <= n; i++)\n
      {\n
	if (n % i == 0)\n
	  count += 1;\n
      }\n

    // if count of divisors greater than 2 then its not prime \n
    if (count > 2)\n
      System.out.println (\"The given is number \" + n + \" is not prime\");\n

    else\n
      System.out.println (\"The given is number \" + n + \" is prime\");\n
  }\n
}\n
        ]]>
    </string>

    <string name="Prime_number_within_a_give_range">
        <![CDATA[

public class Main\n
 {\n
   public static void main (String[]args)\n
   {\n

     int lower = 1, upper = 20;\n


     for (int i = lower; i <= upper; i++)\n
       if (isPrime (i))\n
        System.out.println (i);\n
   }\n

   static boolean isPrime (int n)\n
   {\n
     int count = 0;\n

     // 0, 1 negative numbers are not prime\n
     if (n < 2)\n
       return false;\n

     // checking the number of divisors b/w 1 and the number n-1\n
     for (int i = 2; i < n; i++)\n
       {\n
     if (n % i == 0)\n
        return false;\n
       }\n

     // if reached here then must be true\n
     return true;\n
   }\n
 }\n
        ]]>
    </string>

    <string name="Sum_of_digits_of_a_number">
        <![CDATA[
public class Main\n
 {\n
   public static void main (String[]args)\n
   {\n

     int num = 12345, sum = 0;\n



     //loop to find sum of digits\n
     while(num!=0)\n
     {
         sum += num % 10;\n
         num = num / 10;\n
     }\n

     //output\n
       System.out.println (\"Sum of digits : \" + sum);\n
   }\n


 }\n
        ]]>
    </string>

    <string name="Reverse_of_a_number">
        <![CDATA[
public class Main\n
{\n
    public static void main (String[]args)\n
    {\n

        //variables initialization\n
        int num = 1234, reverse = 0, rem;\n


        //loop to find reverse number\n
        while (num != 0)\n
        {\n
            rem = num % 10;\n
            reverse = reverse * 10 + rem;\n
            num /= 10;\n
        };\n

        //output\n
        System.out.println (\"Reversed Number: \" + reverse);\n
    }\n
}\n
        ]]>
    </string>

    <string name="Palindrome_number">
        <![CDATA[
public class Main\n
 {\n
   public static void main (String[]args)\n
   {\n
     //variables initialization\n
     int num = 12021, reverse = 0, rem, temp;\n

       temp = num;\n
     //loop to find reverse number\n
     while (temp != 0)\n
       {\n
     	rem = temp % 10;\n
     	reverse = reverse * 10 + rem;\n
     	temp /= 10;\n
       };\n

     // palindrome if num and reverse are equal\n
     if (num == reverse)\n
       System.out.println (num + \" is Palindrome\");\n
     else\n
       System.out.println (num + \" is not Palindrome\");\n
   }\n
 } \n
        ]]>
    </string>

    <string name="Armstrong_number">
        <![CDATA[
   public class Main\n
{\n
  public static void main (String[]args)\n
  {\n
    int num = 407, len;\n

    // function to get order(length)\n
      len = order (num);\n

    // check if Armstrong\n
    if (armstrong (num, len))\n
        System.out.println(num + \" is armstrong\");\n
    else\n
        System.out.println(num + \" is armstrong\");\n

  }\n


  static int order (int x)\n
  {\n
    int len = 0;\n
    while (x != 0 )\n
      {\n
	len++;\n
	x = x / 10;\n
      }\n
    return len;\n
  }\n

  static boolean armstrong (int num, int len)\n
  {\n

    int sum = 0, temp, digit;\n
    temp = num;\n

    // loop to extract digit, find power & add to sum\n
    while (temp != 0)\n
      {\n
	// extract digit\n
	digit = temp % 10;\n

	// add power to sum\n
	sum = sum + (int)Math.pow(digit, len);\n
	temp /= 10;\n
      };\n

    return num == sum;\n
  }\n
}\n
        ]]>
    </string>

    <string name="Armstrong_number_in_a_given_range">
        <![CDATA[
        //Java program to print armstrong numbers between two intervals\n
        \n
import java.util.Scanner;\n

public class Main\n
{\n
    public static void main(String[] args)\n
    {\n
        Scanner sc = new Scanner(System.in);\n
        System.out.print("Enter lower and upper ranges : ");\n
        int low = sc.nextInt();\n
        int high = sc.nextInt();\n

        System.out.println(\"Armstrong numbers between \" + low + \" and \" + high + \" are : \");\n

        // loop for finding and printing all armstrong numbers between given range\n
        for(int num = low ; num <= high ; num++)\n
        {\n
            int sum = 0, temp, digit, len;\n

            len = getOrder(num);\n
            temp = num;\n
            // loop to extract digit, find ordered power of digits & add to sum\n
            while(temp != 0)\n
            {\n
                // extract digit\n
                digit = temp % 10;\n

                // add power to sum\n
                sum = sum + (int) Math.pow(digit,len);\n
                temp /= 10;\n
            };\n

            if(sum == num)\n
                System.out.print(num + \" \");\n
        }\n

    }\n

    private static int getOrder(int num)\n
     {\n
            int len = 0;\n
            while (num!=0)\n
            {\n
                len++;\n
                num = num/10;\n
            }\n
            return len;\n
    }\n
}\n
        ]]>
    </string>
    <string name="Fibonacci_Series_upto_nth_term">
        <![CDATA[
public class Main\n
 {\n
   public static void main (String[]args)\n
   {\n

     int num = 15;\n
     int a = 0, b = 1;\n

     // Here we are printing 0th and 1st terms\n
       System.out.print (a + \" , \" + b + \" , \");\n

     int nextTerm;\n

     // printing the rest of the terms here\n
     for (int i = 2; i < num; i++)\n
       {\n
      nextTerm = a + b;\n
      a = b;\n
          b = nextTerm;\n
          System.out.print (nextTerm + \" , \");\n
       }\n


   }\n
 }   \n
        ]]>
    </string>

    <string name="Factorial_of_a_number">
        <![CDATA[
        class Main\n
{\n

    static int factorial(int n)\n
    {\n
        int res = 1, i;
        for (i = 2; i <= n; i++)\n
            res *= i;\n
        return res;\n
    }\n


    public static void main(String[] args)\n
    {\n
        int num = 6;\n
        System.out.println(\"Factorial of \" + num + \" is \" + factorial(num));
    }\n
}\n
        ]]>
    </string>

    <string name="Power_of_a_number">
        <![CDATA[
public class Main\n
{\n
	public static void main(String[] args)\n
	 {\n

	double base = 1.5;\n

    int expo = 2;\n
    double res = 1.0;\n

    while (expo != 0) \n
    {\n
        res *= base;\n
        expo-/-;\n
    }\n

    System.out.println(\"Result = \" + res); \n
	}\n
}\n
        ]]>
    </string>

    <string name="Factor_of_a_number">
        <![CDATA[
        public class Main\n
 {\n
      public static void main(String[] args) \n
      {\n

      int num = 10;\n

     System.out.println( \"Factors of \" + num + \" are \" );\n


     for(int i = 1; i <= num; i++)\n
     {\n
         if(num % i == 0)\n
             System.out.println(i + \" \"); \n
     }\n

      }\n
 }\n
        ]]>
    </string>
    <string name="Strong_number">
        <![CDATA[
public class Main\n
 {\n
   public static void main (String[]args)\n
   {\n

     int num = 145;\n

     if (detectStrong (num))\n
         System.out.println (num + \" is Strong Number\");\n
     else\n
         System.out.println (num + \" is not a Strong Number\");\n
   }\n


   static int facto (int n)\n
   {\n
     int fact = 1;\n

     for (int i = 1; i <= n; i++)\n
       fact = fact * i;\n

     return fact;\n
   }\n

   static boolean detectStrong (int num)\n
   {\n

     int digit, sum = 0;\n
     int temp = num;\n
     boolean flag = false;\n

     // calculate 1! + 4! + 5!\n
     while (temp != 0)\n
       {\n
     	digit = temp % 10;\n

     	sum = sum + facto (digit);\n
 	    temp /= 10;\n
       }\n


     if (sum == num)\n
       flag = true;\n
     else\n
       flag = false;\n

     return flag;\n


   }\n
 }\n
        ]]>
    </string>
    <string name="Perfect_number">
        <![CDATA[
        public class Main\n
 {\n
   public static void main (String[]args)\n
   {\n

     int n = 28, sum = 0;\n

     for (int i = 1; i < n; i++)\n
       {\n
     	if (n % i == 0)\n
 	        sum = sum + i;\n
       }\n

     if (sum == n)\n
       System.out.println (n + \" Is a perfect number\");\n
     else\n
       System.out.println (n + \" Is not a perfect number\");\n

   }\n
 }\n
        ]]>
    </string>

    <string name="Automorphic_number">
        <![CDATA[
        public class Main\n
{\n
	public static void main(String[] args) \n
	{\n

	int n = 376, sq = n * n ;\n
    if(isAutomorphic(n) == 1)\n
        System.out.println(\"Num: \" + n + \", Square: \"  + sq + \" - is Automorphic\");\n
    else\n
        System.out.println(\"Num: \" + n + \", Square: \" + sq + \" - is not Automorphic\");\n


	}\n

	static int isAutomorphic(int n)\n
	{\n
    int square = n * n;\n
    while(n != 0)\n
    {\n
        // means not automorphic number\n
        if(n % 10 != square % 10)\n
        {\n
            return 0;\n
        }\n
        // reduce down numbers\n
        n /= 10;\n
        square /= 10;\n
    }\n
    // if reaches here means automorphic number\n
    return 1;\n
}\n
}\n
]]>
    </string>
    <string name="Harshad_number">
        <![CDATA[
public class Main \n
{\n
    public static void main(String[] args)\n
	{\n

		int n = 47;\n

		int result = 0;\n

		while(n != 0)\n
		{\n
			int pick_last = n % 10;\n
			result = result + pick_last;\n
			n = n / 10;\n
		}\n

      if(n % result == 0)\n
      System.out.println(\"Harshad Number\");\n
          else\n
        System.out.println(\"Not a Harshad Number\");\n
}\n
}\n
        ]]>
    </string>

    <string name="Abundant_number">
        <![CDATA[
public class Main\n
 {\n
   public static void main (String[]args)\n
   {\n

     int n = 12, sum = 0;\n

     for (int i = 1; i < n; i++) \n
     { \n
     if (n % i == 0) sum = sum + i; \n
     } \n
     if (sum > n)\n
       {\n
     	System.out.println (n + \" is an Abundant Number\");\n
     	System.out.println (\"The Abundance is: \" + (sum - n));\n
       }\n
     else\n
       System.out.println (n + \" is not an Abundant Number\");\n
   }\n
 }\n
        ]]>
    </string>
    <string name="Friendly_pair">
        <![CDATA[
        public class Main\n
 {\n
   public static void main (String[]args)\n
   {\n

     int num1 = 30, num2 = 140;\n

     int sum1 = getDivisorsSum (num1);\n
     int sum2 = getDivisorsSum (num2);\n

     if (sum1 / num1 == sum2 / num2)\n
       System.out.println (num1 + \" & \" + num2 + \" are friendly pairs\");\n
     else\n
         System.out.println (num1 + \" & \" + num2 + \" are not friendly pairs\");\n
   }\n

   static int getDivisorsSum (int num)\n
   {\n

     int sum = 0;\n

     for (int i = 1; i < num; i++)\n
       {\n
 	    if (num % i == 0)\n
 	    sum = sum + i;\n
       }\n
     return sum;\n
   }\n
 }\n
        ]]>
    </string>

    <string name="Highest_Common_Factor_HCF">
        <![CDATA[
        class Main\n
{\n
  public static void main (String[]args)\n
  {\n
    int num1 = 36, num2 = 60, hcf=0;\n

    for (int i = 1; i <= num1 || i <= num2; i++)\n
      {\n
     if (num1 % i == 0 && num2 % i == 0)\n
        hcf = i;\n
      }\n

    System.out.println(\"The HCF: \" + hcf);\n
  }\n
}\n
        ]]>
    </string>

    <string name="Lowest_Common_Multiple_LCM">
        <![CDATA[
        public class Main\n
{\n
  public static void main (String[]args)\n
  {\n
    int num1 = 36, num2 = 60, lcm = 0;  \n
    int max = (num1 > num2) ? num1 : num2;\n
    for (int i = max; i <= num1 * num2; i++)\n
      {\n
     if (i % num1 == 0 && i % num2 == 0)\n
        {\n
         lcm = i;\n
         break;\n
        }\n
      }\n
    System.out.println (\"The LCM: \" + lcm);\n
  }\n
}\n
        ]]>
    </string>
    <string name="Greatest_Common_Divisor">
        <![CDATA[
        class Main\n
{\n
  public static void main (String[]args)\n
  {\n
    int num1 = 36, num2 = 60, hcf=0;\n

    for (int i = 1; i <= num1 || i <= num2; i++)\n
      {\n
     if (num1 % i == 0 && num2 % i == 0)\n
        hcf = i;\n
      }\n

    System.out.println(\"The HCF: \" + hcf);\n
  }\n
}\n
        ]]>
    </string>

    <string name="Binary_to_Decimal_to_conversion">
        <![CDATA[
  import java.util.Scanner;\n
public class Main\n
{
	public static void main(String args[])\n
	{\n
		Scanner sc = new Scanner(System.in);    \n
		System.out.print(\"Enter a binary number : \");\n
		int binary = sc.nextInt();\n

		int decimal = 0;\n

		int n = 0;  \n

		while(binary > 0)\n
		{\n
			int temp = binary%10; \n
			decimal += temp*Math.pow(2, n);  \n
			binary = binary/10;  \n
			n++;  \n
		}\n
		System.out.println(\"Decimal number : \"  +decimal); \n

		sc.close();\n
	}\n
}\n
        ]]>
    </string>

    <string name="Octal_to_Decimal_conversion">
        <![CDATA[
import java.util.Scanner;\n
public class Main\n
{\n
	public static void main(String args[])\n
	{  \n

		Scanner sc = new Scanner(System.in);    \n

		System.out.print(\"Enter a octal number : \");\n
		int octal = sc.nextInt();\n

		int decimal = 0;\n

		int n = 0;  \n

		while(octal > 0)\n
		{\n
			int temp = octal % 10;  \n
			decimal += temp * Math.pow(8, n);  \n
			octal = octal/10;  \n
			n++;  \n
		}\n

		System.out.println(\"Decimal number : \" +decimal); \n

		sc.close();   \n
	}\n
}\n
        ]]>
    </string>
    <string name="Hexadecimal_to_Decimal_conversion">
        <![CDATA[
 class Main\n
{\n
  public static void main (String[]args)\n
  {\n

    String hex = "C9";\n
    System.out.println (convert (hex));\n
  }\n

  static int convert(String hex)\n
  {  \n
    String digits = "0123456789ABCDEF";
             hex = hex.toUpperCase();  \n
             int val = 0;  \n
             for (int i = 0; i < hex.length(); i++)  \n
             {  \n
                 char c = hex.charAt(i);  \n
                 int d = digits.indexOf\(c\);\n
                 val = 16*val + d;  \n
             }  \n
             return val;  \n
  }  \n

}\n
        ]]>
    </string>
    <string name="Decimal_to_Binary_conversion">
        <![CDATA[
        public class Main\n
{\n
	public static void main(String args[])\n
	{   \n
		//Decimal Number\n
		int decimal = 12;\n
		//integer array for storing binary digits \n
		int binary[] = new int[20];\n
		int i = 0; \n

		while(decimal > 0)\n
		{       \n
			int r = decimal % 2;\n
			binary[i++] = r;\n
			decimal = decimal/2;\n
		}\n

		System.out.print(\"Binary number : \");\n
		for(int j = i-1 ; j >= 0 ; j-\-)\n
		System.out.print(binary[j]+\" \");\n
	}\n
}\n
        ]]>
    </string>

    <string name="Decimal_to_Octal_Conversion">
        <![CDATA[
  import java.util.Scanner;\n
public class Main\n
{
	public static void main(String args[])\n
	{   \n

		Scanner sc = new Scanner(System.in); \n
		//Number\n
		int decimal = 148;\n
		//integer array for storing octal digits\n
		int octal[] = new int[20];\n
		int i = 0; \n
		//writing logic for the conversion \n
		while(decimal > 0)\n
		{
			int r = decimal % 8;\n
			octal[i++] = r;\n
			decimal = decimal/8;\n
		}\n

		System.out.print(\"Octal number : \");\n
		for(int j = i-1 ; j >= 0 ; j-\-)\n
		System.out.print(octal[j]);\n

		sc.close();\n
	}\n
}\n

        ]]>
    </string>

    <string name="Decimal_to_Hexadecimal_Conversion">
        <![CDATA[
  public class Main/n
   {/n
    public static void main(String[] args)/n
     {/n

        int decimal = 255;/n


        String hexadecimal = Integer.toHexString(decimal);/n

        System.out.println(\"Decimal: \" + decimal);/n
        System.out.println(\"Hexadecimal: \" + hexadecimal);/n
    }/n
}/n

        ]]>
    </string>

    <string name="Binary_to_Octal_conversion">
        <![CDATA[
import java.util.Scanner;\n
public class Main\n
{\n
	public static void main(String args[])\n
	{\n

		Scanner sc = new Scanner(System.in);    \n

		System.out.print(\"Enter a binary number : \");\n
		int binary = sc.nextInt();\n

		int decimal = 0;\n

		int n = 0;  \n

		while(binary > 0)\n
		{\n
			int temp = binary%10;  \n
			decimal += temp*Math.pow(2, n);  \n
			binary = binary/10;  \n
			n++;  \n
		}\n
		int octal[] = new int[20];\n
		int i = 0;\n

		while(decimal > 0)\n
		{\n
			int r = decimal % 8;\n
			octal[i++] = r;\n
			decimal = decimal / 8;\n
		}\n

		System.out.print(\"Octal number : \");\n
		for(int j = i-1 ; j >= 0 ; j-\-)\n
		System.out.print(octal[j]); \n

		sc.close();\n
	}\n
}\n
        ]]>
    </string>

    <string name="Octal_to_Binary_conversion">
        <![CDATA[
 class Main\n
{\n
    public static void main(String args[])\n
    {\n
        int octal = 12;

        //Declaring variable to store decimal number\n
        int decimal = 0;\n
        //Declaring variable to use in power\n
        int n = 0;\n

        //writing logic for the octal to decimal conversion\n
        while(octal > 0)\n
        {\n
            int temp = octal % 10;\n
            decimal += temp * Math.pow(8, n);\n
            octal = octal/10;\n
            n++;\n
        }\n

        int binary[] = new int[20];\n
        int i = 0;\n

        //writing logic for the decimal to binary conversion\n
        while(decimal > 0)\n
        {\n
            int r = decimal % 2;\n
            binary[i++] = r;\n
            decimal = decimal/2;\n
        }\n


        System.out.print(\"Binary number : \");\n

        for(int j = i-1 ; j >= 0 ; j-\-)\n
            System.out.print(binary[j]+\" \");\n

    }\n
} \n
        ]]>
    </string>
    <string name="Quadrants_in_which_a_given_coordinate_lies">
        <![CDATA[
        import java.io.*;

public class Main\n
{\n

    public static void main (String[] args) \n
    {\n

        int x=-3, y=-33;\n

        //find true condition of first quadrant\n
        if(x>0 && y>0)\n
            System.out.println(\"Quadrant I\");   \n

        //find second quadrant\n
        else if(x<0 && y>0)\n
            System.out.println(\"Quadrant II\");\n

        //To find third quadrant\n
        else if(x<0 && y<0) System.out.println(\"Quadrant III\"); \n

        //To find Fourth quadrant \n
        else if (x > 0 && y < 0)\n
            System.out.println(\"Quadrant IV\");\n

        //To find dose not lie on origin\n
        else if (x == 0 && y == 0)\n
            System.out.println(\"Origin\");\n

        //On x-axis\n
        else if (y==0 && x!=0)\n
            System.out.println(\"x-axis\");\n

        //On y-axis\n
        else if (x==0 && y!=0)\n
            System.out.println(\"y-axis\");\n

    }\n
}\n
        ]]>
    </string>
    <string name="Permutations">
        <![CDATA[
 import java.util.*; \n


public class Main\n
    {
      public static void main(String[] args)  \n
        {  \n

            int n, r, per, fact1, fact2;  \n

            Scanner sc =  new Scanner(System.in);  \n

            System.out.println(\"Enter the Value of n: \");  \n
            n = sc.nextInt();\n

            System.out.println(\"Enter the Value of r: \");\n
            r = sc.nextInt();  \n

            fact1 = 1;  \n

            for (int i = n; i > 1; i=i-1)  \n
            {  \n
                //calculating factorial (n!)\n
                fact1 = fact1 * i;  \n
            }  \n

            int number;  \n

            number = n - r;  \n

            fact2 = 1;  \n

            for (int i = number; i > 1; i=i-1)  \n
            {  \n
                  //calculating factorial ((n-r)!)\n
                fact2 = fact2 * i;\n
            }  \n

            //calculating  nPr\n
            per = fact1 / fact2;  \n

            System.out.println(per+ \" ways\");  \n
    }  \n
}\n
        ]]>
    </string>
    <string name="Maximum_number_of_handshakes">
        <![CDATA[
        public class Main\n
{\n
	public static void main(String[] args)
	{\n

    int num = 10;\n

     // Combination nC2\n
    int total = num * (num-1) / 2;\n

		System.out.println(\"For "\+ num +\" people there will be "\+total+\" handshakes\");\n
	}\n
}\n
        ]]>
    </string>

    <string name="Addition_of_two_fractions">
        <![CDATA[
 import java.util.Scanner;\n
public class Main\n
{\n
	public static void main(String[] args)\n
	{\n

		Scanner sc = new Scanner(System.in);\n

		System.out.print(\"Enter numerator for first fraction : \");\n
		int num1 = sc.nextInt();\n
		System.out.print(\"Enter denominator for first fraction : \");\n
		int den1 = sc.nextInt();\n
		System.out.print(\"Enter numerator for second fraction : \");\n
		int num2 = sc.nextInt();\n
		System.out.print(\"Enter denominator for second fraction : \");	\n
		int den2 = sc.nextInt();\n
		int num, den, x;\n
		System.out.print(\"(\"+num1+\" / "\+den1+\") + (\"+num2+"\ / \"+den2+\") = \");\n
		//logic for calculating sum of two fractions\n
		if(den1 == den2)\n
		{\n
			num = num1 + num2 ;\n
			den = den1 ;\n
		}\n
		else{\n
			num = (num1*den2) + (num2*den1);\n
			den = den1 * den2;\n
		}\n
		if(num > den)\n
			x = num;\n
		else\n
			x = den;\n
		for(int i = 1 ; i <= x ; i++)\n
		{\n
			if(num%i == 0 && den%i == 0)\n
			{\n
				num = num/i;\n
				den = den/i;\n
			}\n
		}\n
		//logic for getting simplified fraction\n
		int n = 1;\n
		int p = num;\n
		int q = den;\n
		if( num != den)\n
		{\n
			while(n != 0)\n
			{\n
				//storing remainder\n
				n = num % den;		\n
				if(n != 0)\n
				{
					num = den;\n
					den = n;\n
				}\n
			}		\n
		}\n
		System.out.println(\"(\"\+p/den+\" / \"+q/den+\")\");\n

		sc.close();		\n
	}\n
}       \n
        ]]>
    </string>

    <string name="Can_a_number">
        <![CDATA[

        import java.util.Scanner;\n
public class Main\n
{\n
	public static void main(String[] args)\n
	{\n

		Scanner sc = new Scanner(System.in);\n
		//input from user\n
		System.out.print(\"Enter a number : \");
		int number = sc.nextInt();\n
		int x = 0;\n
		for(int i = 2 ; i <= number/2 ; i++)\n
		{\n
			if(prime_or_not(i) == 1)\n
			{\n
				if(prime_or_not(number-i) == 1)\n
				{\n
					System.out.println(number+ \" = \" +i+ \" + \"+(number-i));\n
					x = 1;\n
				}\n
			}\n
		}\n
		if(x == 0)\n
			System.out.println(+number+\" cannot be expressed as a sum of two prime numbers\");\n
	}\n
        //function for checking number is prime or not\n
	public static int prime_or_not(int n)\n
	{\n
		int c = 1;\n
		for(int i = 2 ; i < n ; i++)\n
		{\n
			if(n % i == 0)\n
			{\n
				c = 0;\n
				break;\n
			}\n
		}\n
		return c;\n
	}\n
}\n
        ]]>
    </string>

    <string name="Count_possible">
        <![CDATA[
        import java.io.*;\n

public class Main\n
{\n
    public static int cnt_decoding_digits(char[] dig, int a)\n
    {\n
        int cnt[] = new int[a+ 1];\n

        cnt[0] = 1;\n

        cnt[1] = 1;\n

        for (int k = 2; k <= a; k++) \n
        { \n
            cnt[k] = 0; \n

            cnt[k] = cnt[k-1];\n

            if (dig[k-2] == \'1\' || (dig[k-2] == \'2\' && dig[k-1] < \'7\') )\n

                cnt[k] += cnt[k-2];\n
        }\n
        return cnt[a];\n
    }\n
    public static void main (String[] args)\n
    {\n
        String s=\"123\";\n

        char[] dig= s.toCharArray();\n

        System.out.println(cnt_decoding_digits(dig, 3));\n
    }\n
}\n
        ]]>
    </string>
    <string name="Find_the_prime">
        <![CDATA[
public class Main\n
{   \n

	public static void main(String[] args) \n
	{\n
		int a=1,b=100;\n
		for(int i=a;i<=b;i++)\n
		{\n
		    if(checkPrime(i))\n
		    \n{
		        System.out.print(i+\" \" );\n
		    }\n
		}\n
	}\n
	public static boolean checkPrime(int num)\n
	{


	    if(num<2)\n
	    {\n
	        return false;\n
	    }\n
	    else\n
	    {\n

	        int x= num/2;\n
	        for(int i=2;i<x;i++)\n

	        {\n
	            if(num%i==0)\n
	            {\n
	                return false;\n
	            }\n
	        }\n
	    }\n

	    return true;\n
	}\n
}\n
        ]]>
    </string>

    <string name="Calculate_the_number">
        <![CDATA[
        import java.util.Scanner;\n
class Main\n
{	\n
public static void main(String[] args)\n
	{\n
		int number = 12345;\n


		int digit = 0;\n
		while(number != 0)\n
		{\n

			int pick_last = number % 10;\n
			digit++;\n
			number = number / 10;\n
		}\n


		System.out.print(\"Number of Digits = \"+digit);\n

	}\n
}\n
        ]]>
    </string>

    <string name="Counting_number_of_days">
        <![CDATA[



class Main\n
{\n

    public static void main(String args[])\n
    {\n

        int month, year;\n
        month = 12;\n
        year = 2012;\n
        if((month==2) && ((year%4==0) || ((year%100==0)&&(year%400==0))))\n
            System.out.println(\"Number of days is 29\");\n

        else if(month==2)\n
            System.out.println(\"Number of days is 28\");\n

        else if(month==1 || month==3 || month==5 || month==7 || month==8 || month==10 || month==12)\n
            System.out.println(\"Number of days is 31"\);\n

        else\n
            System.out.println(\"Number of days is 30\");\n


    }\n

}\n

        ]]>
    </string>
    <string name="Finding_Number_of_times">
        <![CDATA[

class Main\n
{\n

    public static void main (String[] args)\n

    {\n

        int n = 898989, count = 0;\n

        int d = 9;\n

        while(n>0)\n
        {\n
            int rem = n%10;\n
            if(rem == d)\n
                count++;\n
            n /= 10;\n
        }\n
        System.out.println(count);\n

    }\n

}\n
        ]]>
    </string>
    <string name="Finding_number_of_integers">
        <![CDATA[


class Main\n
{\n
    public static void main(String[] args)\n
    {\n
        int  n = 7, x = 2 ;\n
        int count = 0;\n

        for(int i=1; i<=n; i++)\n
        {\n
            //variable to count the factors of i-th number\n
            int count_factors = 0;\n
            for(int j = 1; j<= i; j++)\n
            {\n
                if(i%j==0)\n
                {\n
                    count_factors++;\n
                }\n
            }\n

        if(count_factors == x)\n
            count++;\n
    }\n
        System.out.println(count);\n
    }\n
}\n
        ]]>
    </string>

    <string name="Finding_Roots_of_a_quadratic_equation">
        <![CDATA[
        import java.io.*;\n
import static java.lang.Math.*;\n
class Main\n
{\n

    static void findRoots(int a, int b, int c)\n
    {\n
        if (a == 0)\n
         {\n
            System.out.println(\"Invalid\");
            return;\n
        }\n

        int d = b * b - 4 * a * c;\n
        double sqrt_val = sqrt(abs(d));\n

        if (d > 0)\n
         {
            System.out.println(\"Roots are real and different\");\n
            System.out.println((double)(-b + sqrt_val) / (2 * a) + \"\n\"+ (double)(-b - sqrt_val) / (2 * a));\n
        }\n
        else if (d == 0) \n
        {\n
            System.out.println(\"Roots are real and same \");
            System.out.println(-(double)b / (2 * a) + \"\n\" + -(double)b / (2 * a));\n
        }\n
        else // d < 0\n
        {\n
            System.out.println(\"Roots are complex\");\n

            System.out.println(-(double)b / (2 * a) + \" + i\" + sqrt_val + \"\n\" + -(double)b / (2 * a) + \" - i\" + sqrt_val);\n
        }\n
    }\n


    public static void main(String args[])\n
    {\n

        int a = 1, b = 4, c = 4;\n


        findRoots(a, b, c);\n
    }\n
}\n
        ]]>
    </string>

    <string name="Power_of_a_Number">
        <![CDATA[
        class Main\n
         {\n
    public static void main(String[] args) \n
    {\n
        int base = 5, x = 3;\n
        System.out.println(\"Required Power is \" + power(base, x));\n
    }\n
    static int power(int base, int x)\n
     {\n
        int result = 1;\n
        while (x > 0) \n
        {\n
            result *= base;\n
            x-\-;\n
        }\n
        return result;\n
    }\n
}\n
        ]]>
    </string>
    <string name="Prime_Number">
        <![CDATA[
        public class Main\n
{\n
      static boolean isPrime(int n)\n
    {\n
        // Check if number is less than\n
        // equal to 1\n
        if (n <= 1)\n
            return false;\n
        // Check if number is 2\n
        else if (n == 2)\n
            return true;\n

        // Check if n is a multiple of 2\n
        else if (n % 2 == 0)\n
            return false;\n

        // If not, then just check the odds\n
        for (int i = 3; i <= Math.sqrt(n); i += 2)\n
        {\n
            if (n % i == 0)\n
                return false;\n
        }\n
        return true;\n
    }\n


    public static void main(String[] args)\n
    {\n
        if (isPrime(20))\n
            System.out.println(\"true\");\n

        else\n
            System.out.println(\"false\");\n
    }\n
}\n
        ]]>
    </string>

    <string name="Largest_element_in_an_array">
        <![CDATA[
        public class Main \n
        {\n
    static int arr[] = {10, 324, 45, 90, 98};\n

    static int largest() \n
    {
        int i;\n

        int max = arr[0];\n

        for (i = 1; i < arr.length; i++) \n
         if (arr[i] > max) max = arr[i];\n
        return max;\n
    }\n
    public static void main(String[] args)\n
     {\n
        System.out.println(\"Largest in given array is \" + largest());\n
    }\n
}\n
        ]]>
    </string>
    <string name="Smallest_element_in_an_array">
        <![CDATA[
       public class Main\n
{\n
   public static void main(String[] args) \n
   {  \n
        int [] arr = new int [] {-5, 1, 7, 6, 3};  \n

        int min = arr[0];  \n

        for (int i = 0; i < arr.length; i++)\n
         {  \n

           if(arr[i] < min)  \n
               min = arr[i];  \n
        }  \n
        System.out.println(\"Smallest element present in given array: \" + min);\n
    }\n
}\n
        ]]>
    </string>
    
    <string name="Reversing_a_Number">
        <![CDATA[
        public class Main\n
{\n
static int reverseDigits(int num)\n
    {\n
        int rev_num = 0;\n
        while (num > 0)\n
         {\n
            rev_num = rev_num * 10 + num % 10;\n
            num = num / 10;\n
        }\n
        return rev_num;\n
    }\n

   public static void main(String[] args)\n
  {\n
    int num = 4562;\n
    System.out.println(\"Reverse of no. is \" + reverseDigits(num));\n
   }\n
 }\n
        ]]>
    </string>
    <string name="HCF_of_two_numbers">
        <![CDATA[
        public class Main\n
{\n
    static int gcd(int a, int b)\n
    {\n
    if (b == 0)\n
        return a;\n
    return gcd(b, a % b);\n
    }\n

    public static void main(String[] args)\n
    {\n
        int a = 98, b = 56;\n
        System.out.println(\"GCD of \" + a + \" and \" + b + \" is \" + gcd(a, b));\n
    }\n
}\n
        ]]>
    </string>

    <string name="LCM_of_two_numbers">
        <![CDATA[

   public class Main \n
   {\n

    static int gcd(int a, int b) \n
    {\n
        if (a == 0) return b;\n
        return gcd(b % a, a);\n
    }\n

    static int lcm(int a, int b)\n
     {\n
        return (a / gcd(a, b)) * b;\n
    }\n

       public static void main(String[] args) \n
       {\n
        int a = 15, b = 20;\n
        System.out.println(\"LCM of \" + a + \" and \" + b + \" is \" + lcm(a, b));\n
    }\n
}\n
        ]]>
    </string>

    <string name="Program_to_calculate">
        <![CDATA[
  public class Main\n
{\n

    private static int recLength(String str)\n
    {\n

        if (str.equals(\" \"))\n
            return 0;\n
        else\n
            return recLength(str.substring(1)) + 1;\n
    }\n


    public static void main(String[] args)\n
    {\n
        String str =\"Taufik\";\n
        System.out.println(\"length of the string \"+recLength(str));\n
    }\n
} \n
        ]]>
    </string>

    <string name="Print_All_Permutations">
        <![CDATA[

 public class Main\n
  {\n

    static void printPermutn(String str, String ans) \n
    {\n
        if (str.length() == 0) \n
        {\n
            System.out.print(ans + \" \");\n
            return;\n
        }\n
        for (int i = 0; i < str.length(); i++)\n
         {
            char ch = str.charAt(i);\n
            String r = str.substring(0, i) + str.substring(i + 1);\n
            printPermutn(r, ans + ch);\n
        }\n
    }\n
     public static void main(String[] args) \n
     {\n
        String s = \"abb\";\n
        printPermutn(s, \" \");\n
    }\n
}\n
        ]]>
    </string>

    <string name="Given_an_integer_N">
        <![CDATA[
        class Main\n
{\n
  public static void main (String args[])\n
  {\n
    int n = 3;\n
    System.out.println (term (1, 1, n));\n
  }\n
  static int term (int calculated, int current, int N)\n
  {\n
    int i, cur = 1;\n
    if (current == N + 1)\n
      return 0;\n
    for (i = calculated; i < calculated + current; i++)\n
      cur *= i;\n
    return cur + term (i, current + 1, N);\n
  }\n
}\n
        ]]>
    </string>

    <string name="Given_a_list_arr_of_N">
        <![CDATA[
        class Main \n
        {\n

    static void subsetSums(int[] arr, int l, int r, int sum)\n
    {\n

        if (l > r)\n
         {\n
            System.out.print(sum + \"  \");\n
            return;\n
        }\n

        subsetSums(arr, l + 1, r, sum + arr[l]);\n

        subsetSums(arr, l + 1, r, sum);\n
    }\n


    public static void main(String[] args)\n
    {\n
        int[] arr = { 5, 4, 3 };\n
        int n = arr.length;\n

        subsetSums(arr, 0, n - 1, 0);\n
    }\n
}\n
        ]]>
    </string>

    <string name="Last_non_zero_digit_in_factorial">
        <![CDATA[
        class Main \n
        {\n


    static int factorial(int n)\n
    {\n
        if(n==0 || n==1)\n
        return 1;\n

        return n*factorial(n-1);\n
    }\n


    public static void main(String[] args)\n
    {\n
        int num = 5;\n
        int fact = factorial(num);\n

        int res;\n

        while(fact%10==0)\n
        {\n
            fact /=10;\n
        }\n

        System.out.println(fact%10);\n
    }\n
}\n
        ]]>
    </string>
    
    <string name="Given_a_positive_integer_N">
        <![CDATA[
        class Main\n
        {\n

static void generateNthrow(int N)\n
{\n

    int prev = 1;\n
    System.out.print(prev);\n

    for(int i = 1; i <= N; i++)\n
    {\n
       int curr = (prev * (N - i + 1)) / i;\n
       System.out.print(\", \" + curr);\n
       prev = curr;\n
    }\n
}\n


public static void main (String[] args)\n
{\n
    int N = 3;\n
    generateNthrow(N);\n
}\n
}\n
        ]]>
    </string>
    <string name="Find_the_Factorial">
        <![CDATA[
        class Main\n
         {\n

    static int factorial(int n)\n
    {\n
        if (n == 0)\n
            return 1;\n

        return n * factorial(n - 1);\n
    }\n


    public static void main(String[] args)\n
    {\n
        int num = 5;\n
        System.out.println(\"Factorial of \" + num  + \" is \" + factorial(5));\n
    }\n
}\n
        ]]>
    </string>

    <string name="Find_all_possible_Palindromic">
        <![CDATA[
        import java.util.ArrayList;\n
import java.util.Deque;\n
import java.util.LinkedList;\n

public class Main\n
{\n
    public static void main(String[] args)\n
    {\n
        String input = "nitin";\n
        System.out.println(\"All possible palindrome partitions for \" + input+ \" are : \");\n
        allPalPartitions(input);\n
    }\n

    private static void allPalPartitions(String input)\n
    {\n
        int n = input.length();\n

        ArrayList<ArrayList> allPart = new ArrayList<>();\n

        Deque currPart = new LinkedList();\n

        allPalPartitonsUtil(allPart, currPart, 0, n, input);\n

        for (int i = 0; i < allPart.size(); i++)\n
        {
            for (int j = 0; j < allPart.get(i).size(); j++)\n
            {\n
                System.out.print(allPart.get(i).get(j) + \" \");\n
            }\n
            System.out.println();\n
        }\n

    }\n

    private static void allPalPartitonsUtil(ArrayList<ArrayList> allPart,\n
    Deque currPart, int start, int n, String input)\n
    {\n
        if (start >= n)\n
        {\n
            allPart.add(new ArrayList<>(currPart));\n
            return;\n
        }\n

        for (int i = start; i < n; i++)\n
        {\n
            if (isPalindrome(input, start, i))\n
            {\n
                currPart.addLast(input.substring(start, i + 1));\n
                allPalPartitonsUtil(allPart, currPart, i + 1, n, input);\n
                currPart.removeLast();\n
            }\n
        }\n
    }\n

    private static boolean isPalindrome(String input,int start, int i)\n
    {\n
        while (start < i)\n
        {\n
            if (input.charAt(start++) != input.charAt(i-\-))\n
                return false;\n
        }\n
        return true;\n
    }\n
}\n
        ]]>
    </string>
    <string name="Find_all_the_N_bit_binary_numbers">
        <![CDATA[
        class Main \n
        {\n
    static void printRec(String number, int extraOnes, int remainingPlaces)\n
    {\n
        if (0 == remainingPlaces)\n
         {\n
            System.out.print(number + \" \");\n
            return;\n
        }\n

        printRec(number + \"1\", extraOnes + 1, remainingPlaces - 1);\n

        if (0 < extraOnes)\n
            printRec(number + \"0\", extraOnes - 1, remainingPlaces - 1);\n
    }\n

    static void printNums(int n)\n
    {\n
        String str = \" \";\n
        printRec(str, 0, n);\n
    }\n

    public static void main(String[] args)\n
    {\n
        int n = 4;\n

        printNums(n);\n
    }\n
}\n
        ]]>
    </string>

    <string name="Remove_all_its_adjacent_duplicate">
        <![CDATA[
        import java.util.*;\n

public class Main\n
{\n

    public static String removeAdjacentDuplicates(String str) \n
    {\n
        if (str.length() <= 1) \n
        {\n
            return str;\n
        }\n

        char firstChar = str.charAt(0);\n
        String remainingStr = removeAdjacentDuplicates(str.substring(1));\n

        if (firstChar == remainingStr.charAt(0)) \n
        {\n
            return remainingStr.substring(1);\n
        } else {\n
            return firstChar + remainingStr;\n
        }\n
    }\n

    public static void main(String[] args) \n
    {\n
        String str = "azxxzy";\n
        String result = removeAdjacentDuplicates(str);\n
        System.out.println(result);\n
    }\n
}\n

        ]]>
    </string>

    <string name="Find_Largest_element_in_an_array">
        <![CDATA[
        public class Main\n
{\n
  public static void main(String args[])\n
  {\n

     int arr[] = {12, 13, 1, 10, 34, 10};\n

     int max = arr[0];\n

     for(int i=0; i<arr.length; i++)\n
     {\n
       if(max < arr[i])\n
       {\n
          max = arr[i];\n
       }\n

     }\n

    System.out.print(max);\n
  }\n
}\n
        ]]>
    </string>

    <string name="Find_Smallest_Element_in_an_Array">
        <![CDATA[
        public class Main\n
{\n
  public static void main(String args[])\n
  {\n

     int arr[] = {12, 13, 1, 10, 34, 10};\n

     int min = arr[0];\n

     for(int i=0; i<arr.length; i++) \n
     { \n
     if(min > arr[i])\n
         {\n
            min = arr[i];\n
         }\n

     }\n

     System.out.print(min); \n
  }\n
}\n
        ]]>
    </string>

    <string name="Find_the_Smallest_and_largest">
        <![CDATA[
        public class Main\n
{\n
   public static void main(String args[])\n
   {\n

       int arr[] = {12, 13, 1, 10, 34, 10};\n

       int largest = arr[0], smallest=arr[0];\n

       for(int i=0; i<arr.length; i++) \n
       {\n
        if(smallest > arr[i])\n
              smallest = arr[i];\n
           if(largest < arr[i])\n
              largest = arr[i];\n

       }\n

       System.out.println(smallest);\n
       System.out.println(largest);\n
   }\n
}\n
        ]]>
    </string>

    <string name="Find_Second_Smallest_Element_in_an_Array">
        <![CDATA[]

        public class Main\n
{ \n
   static int secSmallest(int arr[], int n)\n
   {\n
        int first = Integer.MAX_VALUE, second = Integer.MAX_VALUE;\n

        for (int i=0; i < n; i++)\n
        {\n
            if(arr[i] < first)\n
            { \n
            second = first; first = arr[i]; \n
            } \n
            else if(second>arr[i])\n
           second = arr[i];\n
        }\n

        return second;\n

   }\n
   public static void main(String args[])\n
   {\n

      int arr[] = {12, 13, 1, 10, 34, 10};\n
      int n = arr.length;\n
      System.out.print(secSmallest(arr, n));\n
   }\n
}\n
        ]]>
    </string>
    <string name="Calculate_the_sum_of_elements_in_an_array">
        <![CDATA[
        public class Main\n
{\n
   public static void main(String args[])\n
   {\n

       int arr[] = {12, 13, 1, 10, 34, 10};\n

       int sum = 0;\n

       for(int i=0; i<arr.length; i++)\n
       {\n
         sum = sum + arr[i];\n
       }\n

       System.out.print(sum); \n
   }\n
}\n
        ]]>
    </string>

    <string name="Reverse_an_Array">
        <![CDATA[
        public class Main\n
{\n
   public static void main(String args[])\n
   {\n

     int arr[] = {10, 20, 30, 40, 50};\n

     int n=arr.length;\n
     for(int i=n-1; i>=0; i-\-)\n
       System.out.print(arr[i]+ \" \");\n
    }\n
}\n
        ]]>
    </string>
    <string name="Sort_first_half_in_ascending">
        <![CDATA[
        class Main\n
{\n
   static void printOrder(int[] a, int n)\n
   {\n
     int temp;\n
     for(int i=0;i < n-1;i++)\n
     {\n
        for(int j = 0;j < n/2; j++) { if(a[j]>a[j+1])\n
            {\n
              temp=a[j];\n
              a[j]=a[j+1];\n
              a[j+1]=temp;\n
            }\n
        }\n

        for(int j = n/2;j < n-1; j++)\n
        {\n
            if(a[j] < a[j+1])\n
            {\n
               temp=a[j];\n
               a[j]=a[j+1];\n
               a[j+1]=temp;\n
            }\n
         }\n
      }\n

      for(int i = 0; i < n; i++)\n
         System.out.print(a[i] + \" \");\n

   }\n


   public static void main(String[] args)\n
   {\n
       int[] arr = {3, 2, 4, 1, 10, 30, 40, 20};\n
       int n = arr.length;\n
       printOrder(arr, n);\n
    }\n
}\n
        ]]>
    </string>

    <string name="Sort_the_elements_of_an_array">
        <![CDATA[
        public class Main \n
        { \n
    public static void main(String[] args)\n
     { \n


       int [] arr = new int [] {10, 40, 30, 20}; \n
       int temp = 0; \n


       for (int i = 0; i < arr.length; i++)\n
        { \n
           for (int j = i+1; j < arr.length; j++) \n
           {\n
            if(arr[i] > arr[j]) \n
           { \n
                 temp = arr[i]; \n
                 arr[i] = arr[j]; \n
                 arr[j] = temp; \n
              } \n
           } \n
       } \n



    for (int i = 0; i < arr.length; i++) \n
    { \n
     System.out.print(arr[i] + \" \"); \n
   } \n
  } \n
}\n
        ]]>
    </string>
    <string name="Finding_the_frequency_of_elements_in_an_array">
        <![CDATA[
        class Main\n
{\n
    public static void main (String[] args) \n
    {\n
        int[] arr = {5, 8, 5, 7, 8, 10};\n
        int size = arr.length;\n
        countFrequency(arr, size);\n
    }\n

    static void countFrequency(int[] array, int size)\n
    {\n

        for (int i = 0; i < size; i++)\n
        {
            int flag = 0;\n
            int count = 0;\n

            for (int j = i+1; j < size; j++)\n
            {\n
                if (array[i] == array[j])\n
                {\n
                    flag = 1;\n
                    break;\n
                }\n
            }\n


            if (flag == 1)\n
                continue;\n

            for (int j = 0;j<=i;j++)\n
            {\n
                if (array[i] == array[j])\n
                    count++;\n
            }\n
            System.out.println(array[i]+\": \"+count);\n
        }\n
    }\n
}\n
        ]]>
    </string>

    <string name="Sorting_elements_of_an_array_by_frequency">
        <![CDATA[
        import java.util.*;\n
public class Main \n
{\n
	 static Integer[] arr = {10, 20, 10, 10, 20, 30, 30, 30, 30, 0};\n

	 public static void sortBasedOnFrequencyAndValue(List<Integer> list)\n
	   {\n
	       int n = arr.length;\n
	       final HashMap<Integer, Integer> mapCount = new HashMap<Integer, Integer>();\n
	       final HashMap<Integer, Integer> mapIndex = new HashMap<Integer, Integer>();\n

	       for (int i = 0; i < n; i++) \n
	       {\n
	           if (mapCount.containsKey(arr[i])) \n
	           {\n
	              mapCount.put(arr[i],mapCount.get(arr[i]) + 1);\n
	           }\n
	           else \n
	           {\n
	              mapCount.put(arr[i],1);\n
	              mapIndex.put(arr[i],i);\n
	           }\n
	       }\n
	       Collections.sort(list, new Comparator<Integer>()\n
	       {\n
	           public int compare(Integer n1, Integer n2)\n
	             {\n
	                  int freq1 = mapCount.get(n1);\n
	                  int freq2 = mapCount.get(n2);\n
	                  if (freq1 != freq2)\n
	                   {\n
	                      return freq2 - freq1;\n
	                  }\n
	                  else \n
	                  {\n
	                      return mapIndex.get(n1) - mapIndex.get(n2);\n
	                  }\n
	             }\n
	       });\n
	       System.out.println(list);\n
	    }\n

	public static void main(String[] args) \n
	{\n
		List<Integer> list = Arrays.asList(arr);\n
	       sortBasedOnFrequencyAndValue(list);\n
	}\n
}\n
        ]]>
    </string>

    <string name="Finding_the_Longest_Palindrome_in_an_Array">
        <![CDATA[
  import java.util.*;\n

class Main\n
{\n

    static boolean isPalindrome(int n)\n
    {\n

          int divisor = 1;\n
          while (n / divisor >= 10)\n
             divisor *= 10;\n

          while (n != 0) \n
          {\n
             int x = n / divisor;\n
             int y = n % 10;\n


             if (x != y)\n
               return false;\n

             n = (n % divisor) / 10;\n

            divisor = divisor / 100;\n
         }\n
         return true;\n
    }\n


    static int largestPalindrome(int []A, int n)\n
    {\n
         int res = -1;\n

         for (int i = 0; i < n; i++) \n
         { \n
                 if (A[i] > res && isPalindrome(A[i]))\n
                     res = A[i];\n
         }\n


        return res;\n
     }\n


    public static void main(String []args)\n
    {\n
       int []A = { 121, 2322, 54545, 999990 };\n
       int n = A.length;\n


      System.out.println(largestPalindrome(A, n));\n
    }\n

}\n
        ]]>
    </string>

    <string name="Counting_Distinct_Elements_in_an_Array">
        <![CDATA[
        import java.util.Arrays;\n

class Main\n
{\n
   public static void countFreq(int arr[], int n)\n
   {\n
         boolean visited[] = new boolean[n];\n
         Arrays.fill(visited, false);\n
         int count_dis=0;\n

         for (int i = 0; i < n; i++) \n
         {\n


            if (visited[i] == true)\n
             continue;\n


            for (int j = i + 1; j < n; j++)\n
             {\n
                if (arr[i] == arr[j])\n
                 {\n
                   visited[j] = true;\n

                }\n
            }\n
            count_dis = count_dis+1;\n
   }\n
   System.out.println(count_dis);\n
  }\n


   public static void main(String []args)\n
   {\n
      int arr[] = new int[]{10, 30, 40, 20, 10, 20, 50, 10};\n
      int n = arr.length;\n
      countFreq(arr, n);\n
   }\n
}\n
        ]]>
    </string>
    <string name="Finding_Repeating_elements_in_an_Array">
        <![CDATA[
        import java.util.*;\n
class Main\n
{\n
   public static void countFreq(int arr[], int n)\n
   {\n
         boolean visited[] = new boolean[n];\n
         Arrays.fill(visited, false);\n


         for (int i = 0; i < n; i++)\n
          {\n


            if (visited[i] == true)
             continue;


            int count = 1;\n
            for (int j = i + 1; j < n; j++)\n
             {\n
                if (arr[i] == arr[j]) \n
                {\n
                   visited[j] = true;\n
                   count++;\n
                }\n
            }\n
            if(count!=1)   \n
               System.out.println(arr[i]);\n
   }\n
} \n

public static void main(String []args) \n
{ \n
int arr[] = new int[]{10, 30, 30, 20, 10, 20, 50, 10};\n
 int n = arr.length; \n
countFreq(arr, n); \n
} \n
}\n
        ]]>
    </string>

    <string name="Finding_Non_Repeating_elements_in_an_Array">
        <![CDATA[
        import java.util.Arrays;\n

class Main\n
{\n
   public static void countFreq(int arr[], int n)\n
   {\n
         boolean visited[] = new boolean[n];\n
         Arrays.fill(visited, false);\n

         for (int i = 0; i < n; i++) \n
         {\n


            if (visited[i] == true)\n
             continue;\n

            int count = 1;\n
            for (int j = i + 1; j < n; j++)\n
             {\n
                if (arr[i] == arr[j])\n
                 {\n
                   visited[j] = true;\n
                   count++;\n
                }\n
            }\n
            if(count==1)   \n
              System.out.println(arr[i]);\n
   }\n
} \n

public static void main(String []args) \n
{ \n
int arr[] = new int[]{10, 30, 40, 20, 10, 20, 50, 10}; \n
int n = arr.length;\n
 countFreq(arr, n); \n
}\n
 }\n

        ]]>
    </string>
    <string name="Removing_Duplicate_elements_from_an_array">
        <![CDATA[
        import java.util.*;\n
class Main\n
{\n
  public static void main (String[] args)\n
  {\n
     int arr[] = {10, 20, 20, 30, 40, 40, 40, 50, 50};\n
     int n = arr.length;\n
     Set hash_Set = new HashSet();\n
for (int i=0; i<n; i++)\n
hash_Set.add(arr[i]);\n

System.out.print(hash_Set);\n
}\n
}\n
        ]]>
    </string>

    <string name="Finding_Minimum_scalar_product_of_two_vectors">
        <![CDATA[
        class Main\n
{\n
    public static void main (String[] args)]\n
    {\n
           int arr1[] = {1, 2, 6, 3, 7};\n
           int arr2[] = {10, 7, 45, 3, 7};\n
           int n = arr1.length;\n


           for(int i=0; i<n; i++)]n
           {\n
                for(int j=i+1; j<n; j++){ if(arr1[i]>arr1[j])]n
                {\n
                       int temp = arr1[i];\n
                       arr1[i] = arr1[j];\n
                       arr1[j] = temp;\n
                    }\n
                }\n
            }\n


           for(int i=0; i<n; i++)\n
           {\n
                for(int j=i+1; j<n; j++)]\n
                {\n
                    if(arr2[i]<arr2[j])\n
                    {\n
                        int temp = arr2[i];\n
                        arr2[i] = arr2[j];\n
                        arr2[j] = temp;\n
                    }\n
                 }\n
            }\n

          int product = 0;\n
          for(int i=0; i<n; i++)\n
              product += arr1[i]*arr2[i];\n

          System.out.print(product);\n
   }\n
}\n

        ]]>
    </string>
    <string name="Finding_Maximum_scalar">
        <![CDATA[
        class Main\n
{\n
    public static void main (String[] args)\n
    {\n
           int arr1[] = {1, 2, 6, 3, 7};\n
           int arr2[] = {10, 7, 45, 3, 7};\n
           int n = arr1.length;\n


           for(int i=0; i<n; i++)\n
           {\n
                for(int j=i+1; j<n; j++)\n
                { \n
                if(arr1[i]>arr1[j])\n
                {\n
                       int temp = arr1[i];\n
                       arr1[i] = arr1[j];\n
                       arr1[j] = temp;\n
                    }\n
                }\n
            }\n


           for(int i=0; i<n; i++)\n
           {\n
                for(int j=i+1; j<n; j++)\n
                { \n
                if(arr2[i]>arr2[j])\n
                {\n
                        int temp = arr2[i];\n
                        arr2[i] = arr2[j];\n
                        arr2[j] = temp;\n
                    }\n
                 }\n
            }\n

          int product = 0;\n
          for(int i=0; i<n; i++)\n
              product += arr1[i]*arr2[i];\n

          System.out.print(product);\n
   }\n
}\n
        ]]>
    </string>
    <string name="Counting_the_number">
        <![CDATA[
class Main\n
{\n
  public static void main (String[] args)\n
  {\n
     int arr[] = {1, 20, 60, 31, 75, 40, 80};\n
     int n = arr.length;\n
     int countEven = 0, countOdd = 0;\n

     for(int i=0; i<n; i++)\n
     {\n
         if((arr[i] % 2 )== 0)\n
           countEven += 1;\n

         else\n
           countOdd += 1;\n
     }\n
     System.out.println(\"Even Elements count : \"+ countEven);\n
     System.out.println(\"Odd Elements count : \"+ countOdd);\n
  }\n
}\n
        ]]>
    </string>

    <string name="Find_maximum_product_sub_array">
        <![CDATA[
class Main \n
{\n

    static int maxSubarrayProduct(int arr[])\n
    {\n

        int result = arr[0];\n
        int n = arr.length;\n

        for (int i = 0; i < n; i++)\n
        {\n
            int mul = arr[i];\n

            for (int j = i + 1; j < n; j++)\n
            {\n

                result = Math.max(result, mul);\n
                mul *= arr[j];\n
            }\n

            result = Math.max(result, mul);\n
        }\n
        return result;\n
    }\n


    public static void main(String[] args)\n
    {\n
        int arr[] = { 10, -20, -30, 0, 70, -80, -20 };\n
        System.out.println(\"Maximum Sub array product is \" + maxSubarrayProduct(arr));\n
    }\n
} \n
        ]]>
    </string>
    <string name="Finding_Arrays_are_disjoint_or_not">
        <![CDATA[
class Main\n
{\n

    static boolean Disjoint(int arr1[], int arr2[])\n
    {\n

        for(int i=0; i<arr1.length; i++)\n
        {\n
        for(int j=0; j<arr2.length; j++)\n
        {\n
            if(arr1[i]==arr2[j])\n
            {\n
                return false;   \n
            }\n
        }\n
    }\n
    return true;\n
    }\n


    public static void main (String[] args)\n
    {\n
        int arr1[] = {10, 51, 3, 43, 6};\n
        int arr2[] = {80, 71, 29, 3};\n

        if (Disjoint(arr1, arr2))\n
            System.out.println(\"Yes\");\n
        else\n
            System.out.println(\"No\");\n
    }\n
}\n
        ]]>
    </string>

    <string name="Determine_Array_is_a_subset">
        <![CDATA[
class Main\n
{\n

   static boolean isSubset(int arr1[], int arr2[], int m, int n)\n
    {\n
        int i = 0;\n
        int j = 0;\n
        for (i = 0; i < n; i++)\n
         {\n
            for (j = 0; j < m; j++)\n
            {\n
                if (arr2[i] == arr1[j])\n
                    break;\n
            }\n

            if (j == m)\n
            return false;\n
        }\n

        return true;\n
    }\n

    public static void main(String args[])\n
    {\n
        int arr1[] = { 11, 10, 13, 21, 30, 70 };\n
        int arr2[] = { 11, 30, 70, 10 };\n

        int m = arr1.length;\n
        int n = arr2.length;\n

        if (isSubset(arr1, arr2, m, n))\n
            System.out.print(\"arr2[] is subset of arr1[] \");
        else\n
            System.out.print(\"arr2[] is not subset of arr1[] \");\n

    }\n
}\n
        ]]>
    </string>
    <string name="Determine_can_all_numbers_of_an">
        <![CDATA[
import java.util.*;\n
public class Main\n
{\n
    public static boolean make_equal(int arr[], int n)\n
    {\n
        for (int i = 0; i < n; i++)\n
        {\n

            while (arr[i] % 2 == 0)\n
                arr[i] /= 2;\n


            while (arr[i] % 3 == 0)\n
                arr[i] /= 3;\n
        }\n

        for (int i = 1; i < n; i++)\n
            if (arr[i] != arr[0])\n
            {\n
                return false;\n
            }\n
        return true;\n
    }\n

    public static void main (String[] args)\n
    {\n
        int arr[] = { 50, 100, 75 };\n

        int m = arr.length;\n

        if (make_equal(arr, m))\n
            System.out.print(\"Yes\");\n
        else\n
            System.out.print(\"No\");\n
    }\n

}\n
        ]]>
    </string>
    <string name="Finding_Minimum_sum_of_absolute">
        <![CDATA[
import java.util.Arrays;\n

public class Main\n
 {\n

    static int sumOfMinAbsDifferences(int arr[] ,int n)\n
    {\n

        int result = Integer.MAX_VALUE;\n

        for (int i = 0; i < n; i++)\n
        {\n
            int sum =0;\n
            for(int j=0; j<n; j++)\n
            {\n
                sum += Math.abs(arr[i] - arr[j]);\n
            }\n

            result = Math.min(sum, result);\n
        }\n

        return result;\n
    }    \n


    public static void main(String args[])\n
    {\n
        int arr[] = {2, 4, 5, 3};\n
        int n = arr.length;\n

        System.out.println( \"Required Minimum Sum is \" + sumOfMinAbsDifferences(arr, n));\n
    }\n
}    \n
        ]]>
    </string>

    <string name="Sort_an_array_according_to_the_order">
        <![CDATA[
import java.util.*;\n


class Main\n
       {\n


    static int first(int arr[], int l, int h,
                     int x, int n)\n
    {\n
        if (h >= l)\n
        {\n
            int mid = l + (h-l)/2;\n

            if ((mid == 0 || x > array[mid-1]) &&
                array[m] == x)\n
                return mid;\n
            if (x > array[m])\n
                return first(arr, (m + 1), h,
                             x, n);\n
            return first(array, l, (m -1), x, n);\n
        }\n
        return -1;\n
    }\n


    static void sort_according(int array1[], int array2[], int m,
                               int n)\n
    {\n

        int temp[] = new int[m1], visited[] = new int[m1];\n
        for (int i = 0; i < m1; i++)\n
        {\n
            temp[i] = array1[i];\n
            visited[i] = 0;\n
        }\n


        Arrays.sort(temp);\n
        int ind = 0;\n

        for (int i = 0; i < n; i++)\n
        {\n

            int f = first(temp, 0, m1-1, array2[i], m);\n


            if (f == -1) continue;\n


            for (int j = f; (j < m && temp[j] == arr2[i]);
                 j++)\n
            {\n
                arr1[ind++] = temp[j];\n
                visited[j] = 1;\n
            }\n
        }\n

        for (int i = 0; i < m1; i++)\n
            if (visited[i] == 0)\n
                arr1[ind++] = temp[i];\n
    }\n


    static void print_array(int array[], int n)\n
    {\n
        for (int i = 0; i < n; i++)\n
            System.out.print(array[i] + \"  \");\n
        System.out.println();\n
    }\n

    public static void main(String args[])\n
    {\n
        int arr1[] = {1, 2, 3, 4, 3, 2, 4, 2, 5};\n
        int arr2[] = {4, 2, 1, 3};\n
        int m = arr1.l;\n
        int n = arr2.l;\n
        System.out.print(\"The Sorted array : \");\n
        sort_according(array1, array2, m1, n);\n
        print_array(arr1, m1);\n
    }\n
}    \n
        ]]>
    </string>

    <string name="Replace_each_element_of_the_array">
        <![CDATA[
import java.util.*;\n

class Main \n
{\n

    static void changeArr(int[] input)\n
    {\n

        int newArray[] = Arrays.copyOfRange(input, 0, input.length);\n


        Arrays.sort(newArray);\n
        for(int i=0; i< input.length; i++)\n
        {\n

        for(int j=0; j< input.length; j++)\n
        {\n
            if(newArray[j]==input[i])\n
            {\n
                input[i] = j+1;\n
                break;\n
            }\n
        }\n
    }\n
    }\n


    public static void main(String[] args)\n
    {\n

        int[] arr = { 100, 2, 70, 12 , 90};\n


        changeArr(arr);\n


        System.out.println(Arrays.toString(arr));\n
    }\n
}\n
        ]]>
    </string>
    <string name="Finding_equilibrium_index_of_an_array">
        <![CDATA[
import java.util.*;\n

public class Main\n
{\n
    static int equilibrium_index(int arr[], int n)\n
    {\n
        int sum = 0;\n
        int leftsum = 0;\n

        for (int i = 0; i < n; ++i)\n
            sum += array[i];\n

        for (int i = 0; i < n; ++i) \n
        {\n
            sum -= array[i];\n

            if (leftsum == sum)\n
                return i;\n

            leftsum += array[i];\n
        }\n

        return -1;\n
    }\n

    public static void main(String[] args)\n
    {\n
        int arr[] = { 1,2,3,4,5,1,3,2,4 };\n
        int arr_size = arr.length;\n
        System.out.print(\"Equilibrium Index : \");\n
        System.out.println(equilibrium_index(arr, arr_size));\n
    }\n
} \n
        ]]>
    </string>

    <string name="Rotation_of_elements_of_array_left_and_right">
        <![CDATA[
class Main \n
{\n

    public static void main(String[] args)\n
    {\n
        int arr[] = { 10, 20, 30, 40, 50, 60, 70};\n
        int n = arr.length;\n
        int k = 3;\n

        int[] temp;\n

        temp =  new int[n];\n

        for(int i=0; i<k; i++)\n
            temp[i] = arr[i];\n

        int x = k;\n
        for(int i=0; x < n; i++)\n
        {\n
            arr[i] = arr[x++];\n
        }\n

        x = 0;\n

        for(int i=n-k; i<n; i++)\n
            arr[i] = temp[x++];\n


        for (int i = 0; i < 7; i++)\n
            System.out.print(arr[i] + \" \");\n
    }\n
}\n
        ]]>
    </string>

    <string name="Block_swap_algorithm_for_array_rotation">
        <![CDATA[
import java.util.*;\n

class Main\n
{\n

    public static void leftRotate(int arr[], int d, int n)\n
    {\n
        leftRotateRec(arr, 0, d, n);\n
    }\n

    public static void leftRotateRec(int arr[], int i, int d, int n)\n
    {\n

        if(d == 0 || d == n)\n
            return;\n

        if(n - d == d)\n
        {\n
            swap(arr, i, n - d + i, d);\n
            return;\n
        }\n

        if(d < n - d)\n
        {\n
            swap(arr, i, n - d + i, d);\n
            leftRotateRec(arr, i, d, n - d);    \n
        }\n
        else{\n
            swap(arr, i, d, n - d);\n
            leftRotateRec(arr, n - d + i, 2 * d - n, d);\n
        }\n
    }\n

    public static void swap(int arr[], int fi, int si, int d)\n
    {\n
        int i, temp;\n

        for(i = 0; i < d; i++)\n
        {\n
            temp = arr[fi + i];\n
            arr[fi + i] = arr[si + i];\n
            arr[si + i] = temp;\n
        }\n
    }\n

    public static void main (String[] args)\n
    {\n
        int arr[] = {10, 20, 30, 40, 50, 60, 70};\n
        leftRotate(arr, 2, 7);\n

        for( int i = 0; i < 7; i++)\n
            System.out.print(arr[i] + \"  \");\n
    }\n
} \n
        ]]>
    </string>

    <string name="Juggling_algorithm_for_array_rotation">
        <![CDATA[
public class Main\n
{\n
       public static int hcf(int a, int c) \n
    { \n
        if (c == 0) \n
             return a; \n
        else\n
             return hcf(c, a % b); \n
    }\n

    public static void leftRotate(int arr[], int d, int n) \n
    { \n
        int i, l, m, temp; \n
        for (i = 0; i < hcf(d, n); i++) \n
        { \n

            temp = arr[i]; \n
            l = i; \n
            while (true) \n
            { \n
                m = l + d; \n
                if (m >= n) \n
                    m = m - n; \n
                if (m == i) \n
                    break; \n
                arr[l] = arr[m]; \n
                l = m; \n
            } \n
            arr[l] = temp; \n
        }\n
        } \n

    public static void main(String[] args) \n
    { \n
        int arr[] = { 10, 20 30, 40, 50, 60, 70 }; \n
        int no_of_rotation = 3;\n
        int n = arr.length;\n
        System.out.println(\ "Array Elements before rotating : \"); \n
        for(int i = 0 ; i < n ; i++)\n
        {\n
            System.out.print(arr[i]+  \"  \"); \n
        }\n
        leftRotate(arr, no_of_rotations, n); \n
        System.out.println( \"Array Elements after rotating : \"); \n
        for(int i = 0 ; i < n ; i++)\n
        {\n
            System.out.print(arr[i] +  \" \");  \n

              }\n
 }\n
 }        \n
        ]]>
    </string>

    <string name="Finding_Circular_rotation_of_an_array_by_K_positions">
        <![CDATA[
class Main\n
 {\n

    static void leftRotate(int arr[], int d, int n) \n
    {\n
        for (int i = 0; i < d; i++) \n
        leftRotatebyOne(arr, n);\n
    }\n
    static void leftRotatebyOne(int arr[], int n) \n
    {\n
        int i, temp;\n
        temp = arr[0];\n
        for (i = 0; i < n - 1; i++) \n
        arr[i] = arr[i + 1];\n
        arr[n - 1] = temp;\n
    }\n

    static void printArray(int arr[], int n) \n
    {\n
        for (int i = 0; i < n; i++) \n
        System.out.print(arr[i] + \"  \");\n
    }\n


    public  static void main(String[] args)\n
     {\n

        int arr[] = {1, 2, 3, 4, 5};\n
        leftRotate(arr, 2, 5);\n
        printArray(arr, 5);\n
    }\n
}        \n
        ]]>
    </string>

  <string name="Check_whether_a_character">
      <![CDATA[


      public class Main\n
{\n
    public static void main(String[] args)\n
    {\n

        char c = \'g\';   \n


        if(c==\'a\'||c==\'e\'||c==\'i\'||c==\'o\'||c==\'u\'||c==\'A\'||c==\'E\'||c==\'I\'||c==\'O\'||c==\'U\')\n
        {\n
            System.out.println(c + \" is a vowel \");  \n
        }\n
        else\n
        {\n
            System.out.println(c + \" is a consonant \");  \n
        }\n

    }\n

}\n
]]>
  </string>

    <string name="Check_whether_a_character_is_a_alphabet_or_not">
        <![CDATA[
public class Main\n
{	\n


    public static void main(String[] args)\n
    {\n
        char ch;\n

        ch = \'9\';\n


        if((ch >= \'a\' && ch <= \'z\') || (ch >= \'A\' && ch <= \'Z\'))\n
	      System.out.println(\"The inserted character \" + ch + \" is an Alphabet\");\n
	else\n
	      System.out.println(\"The inserted character \" + ch + \" is not an Alphabet\");\n



    }\n

} \n
        ]]>
    </string>

    <string name="Find_the_ASCII_value_of_a_character">
        <![CDATA[
class Main\n
{\n
	public static void main(String[] args)\n
	{\n


		char c=\'A\';	\n


		int i = c;\n


		System.out.println(\"ASCII value of \"+c+\" is \"+i);\n


	}\n
}        \n
        ]]>
    </string>
    
    <string name="Length_of_the_string_without">
        <![CDATA[
public class Main\n
 {\n

	public static void main(String[] args) \n
	{\n
		int length=0;\n

                String s = \"Programming\";\n
                for (char c1 : s.toCharArray()) \n
			length++;\n
		System.out.println(\"Length of String is : \"+length);\n

	}\n

}        \n
        ]]>
    </string>

    <string name="Toggle_each_character_in_a_string">
        <![CDATA[
public class Main \n
{\n

	public static void main(String[] args) \n
	{\n
	 String s = "Programming";\n
	 String s1 = \" \";\n
	 for (int i = 0; i < s.length(); i++) \n
	 {\n
		if(Character.isUpperCase(s.charAt(i))) \n
			 s1=s1+Character.toLowerCase(s.charAt(i));\n
		else \n
			 s1=s1+Character.toUpperCase(s.charAt(i));\n
	}\n
	System.out.println(\"Toggle String is : \"+s1);\n

  }\n

} \n
        ]]>
    </string>

    <string name="Count_the_number_of_vowels">
        <![CDATA[
public class  Main\n
{\n

	public static void main(String[] args) \n
	{\n
		String s = \"programming\";\n
		char[] c = s.toCharArray();\n
		int vowel=0;\n

		for (int i = 0; i < s.length(); i++)\n
		 { \n
            if(s.charAt(i)==\'a\' || s.charAt(i)==\'e\' || s.charAt(i)==\'i\' || s.charAt(i)==\'o\' || s.charAt(i)==\'u\') \n
                vowel++; \n
		}\n

	System.out.println(\"Vowels: \" + vowel);\n
    }\n
}        \n
        ]]>
    </string>

    <string name="Remove_the_vowels_from_a_String">
        <![CDATA[
public class Main\n
 {\n

	public static void main(String[] args) \n
	{\n

        String s = \"programming\";\n
        String s1 = \" \";\n
        s1 = s.replaceAll("[aeiou]\", \" \");\n
        System.out.println(\"String after removing vowel : \"+s1);\n
	}\n

}\n

        ]]>
    </string>

    <string name="Check_if_the_given_string_is_Palindrome_or_not">
        <![CDATA[
public class Main\n
 {\n

	public static void main(String[] args)\n
	 {\n

		String s = \"arora\";\n
		String rev = \" \";\n
		for (int i = s.length()-1; i >=0 ; i-\-) \n
			rev=rev+s.charAt(i);\n
		if(s.equals(rev))\n
			System.out.println(\"String is palindrome\");\n
		else \n
			System.out.println(\"String is not palindrome\");\n

	}\n

}      \n
        ]]>
    </string>

    <string name="Print_the_given_string_in_reverse_order">
        <![CDATA[
public class Main\n
 {\n
    public static void main(String[] args)\n
     {\n
    String s =\"Programming\";\n
    StringBuilder sb = new StringBuilder();\n
    sb.append(s);\n
    System.out.println( \"String is : \"+sb);\n
    sb.reverse();\n
   System.out.println(\"Reversed string is : "\+sb);\n
  }\n
}    \n
        ]]>
    </string>

    <string name="Remove_all_characters_from_string_except_alphabets">
        <![CDATA[
class Main\n
{\n

    static void removeSpecialCharacter(String s)\n
    {\n
        for (int i = 0; i < s.length(); i++)\n
        {\n

            if (s.charAt(i) < \'A\' || s.charAt(i) > \'Z\' && s.charAt(i) < \'a\' || s.charAt(i) > \'z\')\n
            {\n


                s = s.substring(0, i) + s.substring(i + 1);\n
                i-\-;\n
            }\n
        }\n
        System.out.print(s);\n
    }\n

    public static void main(String[] args)\n
    {\n
        String s = "$P*r;o..gr, a'm^?";\n
        removeSpecialCharacter(s);\n
    }\n
}\n
        ]]>
    </string>

    <string name="Remove_spaces_from_a_string">
        <![CDATA[
import java.util.Scanner;\n

public class Main\n
 {\n

	public static void main(String[] args)\n
	 {\n
	  Scanner sc =new Scanner(System.in);\n
	  String s = \"Java Program is best\";\n
	  char[] c = s.toCharArray();\n
	  StringBuffer sb = new StringBuffer();\n


	  for (int i = 0; i < c.length; i++)\n
	   {\n
	     if( (c[i] != \' \') && (c[i]!= \'\t\' )) \n
	     {\n
	    	 sb.append(c[i]);\n
	     } \n
          }\n
	  System.out.println(\"String after removing spaces : "\+sb);\n
    }\n
} \n
        ]]>
    </string>

    <string name="Remove_brackets_from">
        <![CDATA[
public class Main\n
 {\n

public static void main(String[] args) \n
{\n

     String s = \"(a+b)=c\";\n
     String result = s.replaceAll(\"[(){}]\",\" \");
     System.out.println(\"Expression without brackets : \"+result);\n
  }\n
}\n
        ]]>
    </string>

    <string name="Count_the_sum_of_numbers_in_a_string">
        <![CDATA[
public class Main \n
{\n
   public static void main(String[] args)\n
    {\n
   String s ="4POGP2GRSMAA6";
   int sum=0;\n
   for (int i = 0; i < s.length(); i++)\n
    {\n
      if(Character.isDigit(s.charAt(i))) \n
      sum=sum+Character.getNumericValue(s.charAt(i));\n
      }\n
   System.out.println(\"Sum of all the digit present in String : \"+sum);\n
  }\n
} \n
        ]]>
    </string>

    <string name="Capitalize_the_first">
        <![CDATA[
import java.util.Scanner;\n
public class Main\n
 {\n
   public static void main(String[] args)\n
    {\n
     Scanner sc =new Scanner(System.in);\n
     System.out.print(\"Enter String : \")\n;
     String s = sc.nextLine();\n
     String newstr = \" \";\n

     String[] str = s.split(\"\\s\");\n
    for (String string : str) \n
    {     \n
      int length = string.length();\n
      String firstchar = string.substring(0, 1);\n
      String restchar = string.substring(1, length - 1);\n
      String lastchar = Character.toString(string.charAt(length - 1));\n
      newstr = newstr+firstchar.toUpperCase()+restchar+\" \";\n
    } \n
    System.out.println(newstr); \n
  }\n
}    \n
        ]]>
    </string>

    <string name="Calculate_frequency_of_characters_in_a_string">
        <![CDATA[
import java.util.Scanner;\n

public class Main\n
 {\n
   public static void main(String[] args) \n
   {\n
    Scanner sc =new Scanner(System.in);\n
     System.out.print(\"Enter String : \");\n
     String str = sc.nextLine(); \n
     int[] freq = new int[str.length()]; \n
     int i, j; \n


     char string[] = str.toCharArray(); \n
     for(i = 0; i <str.length(); i++)\n
      { \n
        freq[i] = 1; \n
          for(j = i+1; j <str.length(); j++) \n
          { \n
            if(string[i] == string[j])\n
             { \n
            freq[i]++; \n


            string[j] = \'0\';\n
          } \n
       } \n
    } \n

    System.out.println(\"Characters and their corresponding frequencies\");\n
    for(i = 0; i <freq.length; i++) \n
    { \n
       if(string[i] != \' \' && string[i] != \'0\')\n
          System.out.println(string[i] + \"-\" + freq[i]);\n
       } \n
   }\n
}     \n
        ]]>
    </string>

    <string name="Find_non_repeating_characters_in_a_string">
        <![CDATA[
class Main\n
{\n
    public static void main(String args[])\n
    {\n
        String inputStr ="programming";\n
        boolean flag = true;\n

        for(char i :inputStr.toCharArray())\n
        {\n

            if (inputStr.indexOf(i) == inputStr.lastIndexOf(i))\n
            {\n
                System.out.println(\"First non-repeating character is: \"+ i);\n
                flag = false;\n
                break;\n
            }\n
        }\n

        if(flag)\n
            System.out.println(\"There is no non repeating character in input string\");\n
    }\n
}\n
        ]]>
    </string>

    <string name="Check_if_two_strings_are_Anagram_or_no">
        <![CDATA[
import java.util.*;\n
public class Main\n
 {\n
    static boolean isAnagram(String str1 , String str2) \n
    {\n
    String s1 = str1.replaceAll(\"[\\s]\", \" \");\n
    String s2 = str2.replaceAll(\"[\\s]\", \" \");\n
    boolean status=true;\n

     if(s1.length()!=s2.length())\n
         status = false;\n
     else\n
     {\n
         char[] a1 = s1.toLowerCase().toCharArray();\n
         char[] a2 = s2.toLowerCase().toCharArray();\n
         Arrays.sort(a1);\n
         Arrays.sort(a2);\n
         status = Arrays.equals(a1, a2);\n
       }\n
       return status;\n
}\n
   public static void main(String[] args)\n
    {\n
     Scanner sc = new Scanner(System.in);\n
     System.out.print(\"Enter two String :\");\n
     String s1 = sc.next();\n
     String s2 = sc.next();\n
     boolean status = isAnagram(s1,s2);\n
       if(status)\n
          System.out.println(s1+\" and \"+s2+\" are Anagram\");\n
       else \n
          System.out.println(s1+\" and \"+s2+\" are not Anagram\");\n
       }\n
}  \n
        ]]>
    </string>
    <string name="Replace_a_sub_string_in_a_string">
        <![CDATA[
import java.util.Scanner;\n
public class Main\n
{\n
public static void main(String[] args) \n
{\n
     Scanner sc = new Scanner(System.in);\n
     System.out.print(\"Enter a String : \");\n
     String s1 = sc.nextLine();\n
     System.out.print(\"Enter the String to be replaced : \");\n
     String oldString = sc.nextLine();\n
     System.out.print(\"Enter the new String : \");\n
     String newString =sc.nextLine();\n

     String replaceString = s1.replace(oldString, newString);\n
     System.out.println(\"New String is :\"+replaceString);\n
   }\n
}     \n
        ]]>
    </string>

    <string name="Replacing_a_particular_word">
        <![CDATA[

public class Main\n
 {\n
    static void remove(String str, String word)\n
     {\n
        String msg[] = str.split(\" \");\n
        String new_str = \" \";\n


        for (String words : msg) \n
        {\n


            if (!words.equals(word)) \n
            {\n

                new_str += words + \" \";\n
            }\n
        }\n

        System.out.print(new_str);\n
    }\n

    public  static void main(String[] args) \n
    {\n

        String str = \"This is the program\";\n

        String word = \"the\";\n

        remove(str, word);\n
    }\n
}      \n
        ]]>
    </string>

    <string name="Find_the_Kth_max_and_min_element_of_an_array">
        <![CDATA[
import java.util.*;\n

public class Main\n
 {\n

    public static void main(String[] args) throws Exception \n
    {\n
        Scanner sc = new Scanner(System.in);\n
        int n, k, i;\n

        System.out.println(\"Enter the size of the array: \");\n
        n = 3;\n

        System.out.println(\"Enter the elements for the array: \");\n
        int arr[] = {1,2,4,5};\n


        System.out.println(\"Enter the value of k: \");\n
        k = 2;\n

        PriorityQueue queue = new PriorityQueue<>(Collections.reverseOrder());\n
        System.out.println(\"Kth smallest element is: \");\n

        for (i = 0; i < n; i++) \n
        {\n
            queue.add(arr[i]);\n
            if (queue.size() > k)\n
             {\n
                queue.poll();\n
            }\n
        }\n
        System.out.println(queue.peek());\n

        PriorityQueue queue1 = new PriorityQueue<>();\n
        System.out.println(\"Kth Largest element is: \");\n

        for (i = 0; i < n; i++) \n
        {\n
            queue1.add(arr[i]);\n
            if (queue1.size() > k)\n
             {\n
                queue1.poll();\n
            }\n
        }\n
        System.out.println(queue1.peek());\n
    }\n
}\n
        ]]>
    </string>

    <string name="Move_all_the_negative">
        <![CDATA[
import java.util.*;\n

public class Main \n
{\n

   public static void shift(int[] arr)\n
    {\n
        int j = 0;\n
        for (int i = 0; i < arr.length; i++)\n
         {\n
            if (arr[i] < 0) \n
            {\n
                if (i != j) \n
                swap(arr, i, j);\n
                j++;\n
            }\n
        }\n
        for (int i = 0; i < arr.length; i++) \n
        {\n
            System.out.print(arr[i] + \" \");\n
        }\n
    }\n


    public static void swap(int[] arr, int i, int j)\n
     {\n
        int temp = arr[i];\n
        arr[i] = arr[j];\n
        arr[j] = temp;\n
    }\n

    public static void main(String[] args) throws Exception\n
     {\n


        int[] arr = new int[]{ -1,0,3,1,-4}; \n

        shift(arr);\n
    }\n
}      \n
        ]]>
    </string>

    <string name="Find_the_Union_and_Intersection">
        <![CDATA[
import java.util.*;\n

public class Main \n
{\n

  public static void Union(int[] arr1, int[] arr2) \n
  {\n
        int i = 0;\n
        int j = 0;\n

        while (i < arr1.length && j < arr2.length)\n
         {\n
            if (arr1[i] < arr2[j]) \n
            {\n
                System.out.print(arr1[i] + \" \");\n
                i++;\n
            }\n
           else if (arr2[j] < arr1[i]) \n
           {\n
                System.out.print(arr2[j] + \" \");\n
                j++;\n
            } else \n
            {\n
                System.out.print(arr1[i] + \" \");\n

                i++;\n
                j++;\n
            }\n

        }\n
        while (i < arr1.length) \n
        {\n
            System.out.print(arr1[i] + \" \");\n
            i++;\n
        }\n
        while (j < arr2.length) \n
        {\n
            System.out.print(arr2[j] + \" \");\n
            j++;\n
        }\n
    }\n

        public static void Intersection(int[] arr1, int[] arr2) \n
        {\n
        int i = 0;\n
        int j = 0;\n
        while (i < arr1.length && j < arr2.length) \n
        {\n
            if (arr1[i] < arr2[j]) \n
            {\n
                i++;\n
            } \n
            else if (arr1[i] > arr2[j])\n
             {\n
                j++;\n
            } else\n
             {\n
                System.out.print(arr1[i] + \" \");\n
                i++;\n
                j++;\n
            }\n
        }\n
    }\n

     public static void main(String[] args) throws Exception\n
      {\n
        Scanner scn = new Scanner(System.in);\n

        int n1 = 3;\n
         System.out.println(\"The size of the array 1:- \"+n1);\n
         int[] arr1 = new int[]{ 1,2,3}; \n
        System.out.println(\"The Elements of array 1\");\n
        for (int i = 0; i < n1; i++) \n
        {\n
            System.out.print(arr1[i] + \" \");\n
        }\n
        System.out.println();\n


        int n2 = 4;\n
         System.out.println(\"The size of the array 2:- \"+n2);\n

         int[] arr2 = new int[]{4,5,6,7}; \n
        System.out.println(\"The Elements of array 2\");\n


        for (int i = 0; i < n2; i++) \n
        {\n
            System.out.print(arr2[i] + \" \");\n
        }\n
        System.out.println();\n
        System.out.println(\"The Union of the two array is \");\n
        Union(arr1, arr2);\n
        System.out.println();\n
        Intersection(arr1, arr2);\n
    }\n
}      \n
        ]]>
    </string>
    
    <string name="Find_largest_sum_contiguous_Subarray">
        <![CDATA[
import java.util.*;\n

public class Main \n
{\n
    public static void main(String[] args) \n
    {\n
        int[] arr = {-2, -3, 4, -1, -2, 1, 5, -3};\n
        int n = arr.length;\n
        int res = Integer.MIN_VALUE;\n
        for (int i = 0; i < n; i++) \n
        {\n
            int sum = 0;\n
            for (int j = i; j < n; j++) \n
            {\n
                sum += arr[j];\n
                res = Math.max(sum, res);\n
            }\n
        }\n
        System.out.println(res);\n
    }\n
}      \n
        ]]>
    </string>

    <string name="Minimize_the_maximum_difference_between_heights">
        <![CDATA[
import java.util.*;\n

public class Main \n
{\n

	public static void main(String[] args)\n
	{\n
		int[] arr = { 7, 4, 8, 8, 8, 9 };\n
		int k = 6;\n
		int ans = getMinDiff(arr, arr.length, k);\n
		System.out.println(ans);\n
	}\n


	public static int getMinDiff(int[] arr, int n, int k)\n
	{\n

		Arrays.sort(arr);\n
		int ans = (arr[n - 1] + k)- (arr[0] + k);\n
		int tempmax = arr[n - 1] - k; \n
		int tempmin = arr[0] + k; \n
		int max, min;\n

		for (int i = 0; i < n - 1; i++) \n
		{\n
			if (tempmax > (arr[i] + k))\n
			 {\n
				max = tempmax;\n
			}\n
			else {\n
				max = arr[i] + k;\n
			}\n

			if (tempmin < (arr[i + 1] - k)) \n
			{\n
				min = tempmin;\n
			}\n
			else \n
			{\n
				min = arr[i + 1] - k;\n
			}\n

			if (ans > (max - min))\n
			 {\n
				ans = max - min;\n
			}\n
		}\n
		return ans;\n
	}\n
}      \n
        ]]>
    </string>

    <string name="Minimum_no_of_Jumps_to_reach_the_end_of_an_array">
        <![CDATA[

public class Main \n
{\n

    private static int minJumps(int[] arr, int n) \n
    {\n

        int jumps[] = new int[n];\n

        int i, j;\n
        if (n == 0 || arr[0] == 0) return Integer.MAX_VALUE;\n


        jumps[0] = 0;\n


        for (i = 1; i < n; i++) \n
        {\n
            jumps[i] = Integer.MAX_VALUE;\n

            for (j = 0; j < i; j++) \n
            {\n
                if (i <= j + arr[j] && jumps[j] != Integer.MAX_VALUE) \n
                {\n
                    jumps[i] = Math.min(jumps[i], jumps[j] + 1);\n
                    break;\n
                }\n
            }\n
        }\n
        return jumps[n - 1];\n
    }\n



   public static void main(String[] args) \n
   {\n
        int arr[] = {2, 1, 3, 2, 3, 4, 5, 1, 2, 8};\n

        System.out.println\"Minimum number of jumps to reach end is : \" +
                           minJumps(arr, arr.length));\n
    }\n
}        \n
        ]]>
    </string>
    <string name="Find_duplicate_in_an_array_of_N_Integers">
        <![CDATA[
import java.util.*;\n

 public class Main \n
 {\n
    static int findduplicate(int[] arr, int n) \n
    {\n

        if (n <= 1) return -1;\n

        int slow = arr[0];\n
        int fast = arr[arr[0]];\n


        while (fast != slow) \n
        {\n

            slow = arr[slow];\n

            fast = arr[arr[fast]];\n
        }\n

        fast = 0;\n
        while (slow != fast) \n
        {\n
            slow = arr[slow];\n
            fast = arr[fast];\n
        }\n
        return slow;\n
    }\n


   public static void main(String args[]) \n
   {\n
        int[] arr = {1, 2, 3, 4, 5, 6, 3};\n
        int n = arr.length;\n
        System.out.print(findduplicate(arr, n));\n
    }\n
}      \n
        ]]>
    </string>

    <string name="Merge_2_sorted_arrays_without_using_extra_space.">
        <![CDATA[
import java.util.*;\n

public class Main\n
 {\n
    static int arr1[] = new int[]{1, 12, 9, 3, 17, 20};\n
    static int arr2[] = new int[]{2, 3, 8, 13};\n
    static void merge(int m, int n) \n
    {\n
        for (int i = n - 1; i >= 0; i-\-)\n
         {\n
            int j, last = arr1[m - 1];\n
            for (j = m - 2; j >= 0 && arr1[j] > arr2[i]; j-\-)\n
             arr1[j + 1] = arr1[j];\n

            if (j != m - 2 || last > arr2[i]) \n
            {\n
                arr1[j + 1] = arr2[i];\n
                arr2[i] = last;\n
            }\n
        }\n
    }\n


   public static void main(String[] args) \n
   {\n
        merge(arr1.length, arr2.length);\n
        System.out.print(\"After Merging First Array: \");\n
        System.out.println(Arrays.toString(arr1));\n
        System.out.print(\"Second Array:  \");\n
        System.out.println(Arrays.toString(arr2));\n
    }\n
}\n
        ]]>
    </string>

    <string name="Kadanes_Algorithm">
        <![CDATA[

public class Main \n
{\n

   public static void main(String[] args)\n
    {\n
        int[] a = {-2, -3, 4, -1, -3};\n
        System.out.println(\"Maximum contiguous sum is \" + maxSubArraySum(a));\n
    }\n
    static int maxSubArraySum(int a[]) \n
    {\n
        int size = a.length;\n
        int max_so_far = Integer.MIN_VALUE, max_ending_here = 0;\n
        for (int i = 0; i < size; i++) \n
        {\n
            max_ending_here = max_ending_here + a[i];\n
            if (max_so_far < max_ending_here) \n
            max_so_far = max_ending_here;\n
            if (max_ending_here < 0) \n
            max_ending_here = 0;\n
        }\n
        return max_so_far;\n
    }\n
}\n
        ]]>
    </string>

    <string name="Merge_Intervals">
        <![CDATA[
import java.util.*;\n
public class Main \n
{\n

public static void mergeIntervals(Interval arr[])\n
{\n

if (arr.length <= 0)\n
return;\n
Stack<Interval> stack=new Stack<>();\n

Arrays.sort(arr,new Comparator<Interval>()\n
{\n
public int compare(Interval i1,Interval i2)\n
{\n
return i1.start-i2.start;\n
}\n
});\n

stack.push(arr[0]);\n
for (int i = 1 ; i < arr.length; i++)\n
{\n
Interval top = stack.peek();\n
if (top.end < arr[i].start)\n
stack.push(arr[i]);\n

else if (top.end < arr[i].end)\n
{\n
top.end = arr[i].end;\n
stack.pop();\n
stack.push(top);\n
}\n
}\n

System.out.print(\"The Merged Intervals are: \");\n
while (!stack.isEmpty())\n
{\n
Interval t = stack.pop();\n
System.out.print("[\"+t.start+\",\"+t.end+\"] \");\n
}\n
}\n

public static void main(String args[])\n
 {\n
Interval arr[]=new Interval[4];\n
arr[0]=new Interval(6,8);\n
arr[1]=new Interval(1,9);\n
arr[2]=new Interval(2,4);\n
arr[3]=new Interval(4,7);\n
mergeIntervals(arr);\n
}\n
}\n

class Interval\n
{\n
int start,end;\n
Interval(int start, int end)\n
{\n
this.start=start;\n
this.end=end;\n
}\n
}  \n
        ]]>
    </string>

    <string name="Count_Inversion">
        <![CDATA[

public class Main\n
 {\n
    static int arr[] = new int[]{1, 6, 4, 5};\n
    static int getInvCount(int n)\n
     {\n
        int inv_count = 0;\n
        for (int i = 0; i < n - 1; i++)\n
            for (int j = i + 1; j < n; j++) \n
            if (arr[i] > arr[j]) \n
            inv_count++;\n
        return inv_count;\n
    }\n

 public static void main(String[] args) \n
 {\n
        System.out.println(\"Number of inversions are \" + getInvCount(arr.length));\n
    }\n
}      \n
        ]]>
    </string>

    <string name="Find_if_there_is_any_subarray">
        <![CDATA[
import java.util.*;

public class Main\n
{ \n
static Boolean subArrayExists(int arr[])\n
    {\n

        Set hs = new HashSet();\n

        int sum = 0;\n

        for (int i = 0; i < arr.length; i++)\n
        {

            sum += arr[i];\n
            if (arr[i] == 0 || sum == 0 || hs.contains(sum))\n
                return true;\n

            hs.add(sum);\n
        }\n

        return false;\n
    }\n


    public static void main(String arg[])\n
    {\n
        int arr[] = { -3, 3, 1, 6 };\n
        if (subArrayExists(arr))\n
            System.out.println(\"Found a subarray with 0 sum\");\n
        else\n
            System.out.println(\"No Such Sub Array Exists!\");\n
    }\n
}      \n
        ]]>
    </string>

    <string name="Find_factorial_of_a_Large_Number">
        <![CDATA[
public class Main\n
{\n
static void factorial(int n)\n
    {\n
        int res[] = new int[500];\n


        res[0] = 1;\n
        int res_size = 1;\n


        for (int x = 2; x <= n; x++)\n
            res_size = multiply(x, res, res_size);\n

        System.out.println(\"Factorial of given number is \");\n
        for (int i = res_size - 1; i >= 0; i-\-)\n
            System.out.print(res[i]);\n
    }\n
    static int multiply(int x, int res[], int res_size)\n
    {\n
        int carry = 0; \n

        for (int i = 0; i < res_size; i++)\n
        {\n
            int prod = res[i] * x + carry;\n
            res[i] = prod % 10;\n
            carry = prod/10; \n
        }\n


        while (carry!=0)\n
        {\n
            res[res_size] = carry % 10;\n
            carry = carry / 10;\n
            res_size++;\n
        }\n
        return res_size;\n
    }\n


    public static void main(String args[])\n
    {\n
        factorial(10);\n
    }\n
}      \n
        ]]>
    </string>

    <string name="Find_common_elements_In_3_sorted_arrays">
        <![CDATA[
class Main\n
{\n

	void findCommon(int ar1[], int ar2[], int ar3[])\n
	{\n

		int i = 0, j = 0, k = 0;\n


		while (i < ar1.length && j < ar2.length
			&& k < ar3.length) \n
			{\n

			if (ar1[i] == ar2[j] && ar2[j] == ar3[k]) \n
			{\n
				System.out.print(ar1[i] + \" \");\n
				i++;\n
				j++;\n
				k++;\n
			}\n


			else if (ar1[i] < ar2[j])\n
				i++;\n


			else if (ar2[j] < ar3[k])\n
				j++;\n
			else\n
				k++;\n
		}\n
	}\n


	public static void main(String args[])\n
	{\n
		Main ob = new Main();\n

		int ar1[] = { 1, 5, 10, 20, 40, 80 };\n
		int ar2[] = { 6, 7, 20, 80, 100 };\n
		int ar3[] = { 3, 4, 15, 20, 30, 70, 80, 120 };\n

		System.out.print(\"Common elements are \");\n
		ob.findCommon(ar1, ar2, ar3);\n
	}\n
}      \n
        ]]>
    </string>

    <string name="Maximum_profit_by_buying">
        <![CDATA[

public class Main \n
{\n
    static int maxProfit(int price[], int n) \n
    {\n

        int profit[] = new int[n];\n

        for (int i = 0; i < n; i++) \n
        profit[i] = 0;\n
        int max_price = price[n - 1];\n

        for (int i = n - 2; i >= 0; i-\-)\n
         {\n


            if (price[i] > max_price)\n
             max_price = price[i];\n
            profit[i] = Math.max(profit[i + 1], max_price - price[i]);\n
        }\n
        int min_price = price[0];\n
        for (int i = 1; i < n; i++)\n
         {\n


            if (price[i] < min_price) min_price = price[i];\n
            profit[i] = Math.max(profit[i - 1], profit[i] + (price[i] - min_price));\n
        }\n

        int result = profit[n - 1];\n
        return result;\n
    }\n



   public static void main(String args[])\n
    {\n
        int price[] = {2, 30, 15, 10, 8, 25, 80};\n
        int n = price.length;\n
        System.out.println(\"Maximum Profit = \" + maxProfit(price, n));\n
    }\n
}      \n
        ]]>
    </string>

    <string name="Find_longest_consecutive_subsequence">
        <![CDATA[
import java.util.*;\n

public class Main\n
{\n
    static int findLongestConseqSubseq(int arr[], int n)\n
    {\n


        Arrays.sort(arr);\n

        int ans = 0, count = 0;\n

        ArrayList v = new ArrayList();\n
        v.add(10);\n

        for (int i = 1; i < n; i++)\n
        {\n
            if (arr[i] != arr[i - 1])\n
                v.add(arr[i]);\n
        }\n


        for (int i = 0; i < v.size(); i++)\n
        {\n

            if (i > 0 && v.get(i) == v.get(i - 1))\n
                count++;\n
            else\n
                count = 1;\n


            ans = Math.max(ans, count);\n
        }\n
        return ans;\n
    }\n


    public static void main(String[] args)\n
    {\n
        int arr[] = { 1, 9, 3, 10, 4, 20, 2 };\n
        int n = arr.length;\n

        System.out.println(\"Length of the Longest \"
            + \"contiguous subsequence is \"
            + findLongestConseqSubseq(arr, n));\n
    }\n
}      \n
        ]]>
    </string>

    <string name="Trapping_Rain_water_problem">
        <![CDATA[

public class Main\n
 {\n

   public static int maxWater(int[] arr, int n) \n
   {\n

        int res = 0;\n


        for (int i = 1; i < n - 1; i++)\n
         {\n

            int left = arr[i];\n
            for (int j = 0; j < i; j++) \n
            {\n
                left = Math.max(left, arr[j]);\n
            }\n

            int right = arr[i];\n
            for (int j = i + 1; j < n; j++) \n
            {\n
                right = Math.max(right, arr[j]);\n
            }\n

            res += Math.min(left, right) - arr[i];\n
        }\n
        return res;\n

    }\n


   public static void main(String[] args) \n
   {\n
        int[] arr = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};\n
        int n = arr.length;\n
        System.out.print(maxWater(arr, n));\n
    }\n
}        \n
        ]]>
    </string>

    <string name="Smallest_Subarray_with_sum_greater">
        <![CDATA[
class Main\n
{\n
    static int smallestSubWithSum(int arr[], int n, int x)\n
    {\n
        int min_len = n + 1;\n

        for (int start = 0; start < n; start++)\n
        {\n
            int curr_sum = arr[start];\n

            if (curr_sum > x)\n
                return 1;\n

            for (int end = start + 1; end < n; end++)\n
            {\n
                curr_sum += arr[end];\n
                if (curr_sum > x && (end - start + 1) < min_len)\n
                    min_len = (end - start + 1);\n
            }\n
        }\n
        return min_len;\n
    }\n


    public static void main(String[] args)\n
    {\n
        int arr[] = {1, 4, 45, 6, 10, 19};\n
        int x = 51;\n
        int n = arr.length;\n
        int res = smallestSubWithSum(arr, n, x);\n
        if (res == n+1)\n
           System.out.println(\"Not Possible\");\n
        else\n
           System.out.println(res);\n

    }\n
}      \n
        ]]>
    </string>

    <string name="Three_way_partitioning">
        <![CDATA[
class Main\n
{\n
    public static void threeWayPartition(int[] arr, int lowVal, int highVal)\n
    {\n

        int  n = arr.length;\n

        int start = 0, end = n-1;\n

        for(int i = 0; i <= end;)\n
        {\n
            if(arr[i] < lowVal)\n
            {\n
                int temp = arr[start];\n
                arr[start] = arr[i];\n
                arr[i] = temp;\n
                start++;\n
                i++;\n

            }\n

            else if(arr[i] > highVal)\n
            {\n
                int temp = arr[end];\n
                arr[end] = arr[i];\n
                arr[i] = temp;\n
                end-\-;\n

            }\n

            else\n
               i++;\n
        }\n

    }\n

    public static void main (String[] args)\n
    {\n


        int arr[] = {1, 14, 5, 20, 4, 2, 54, 20, 87, 98, 3, 1, 32};\n

        threeWayPartition(arr, 10, 20);\n

        for (int i=0; i < arr.length; i++)\n
        {\n
            System.out.print(arr[i] + \" \");\n

        }   \n
    }\n
}      \n
        ]]>
    </string>

    <string name="Median_of_2_sorted_arrays_of_equal_size">
        <![CDATA[
class Main\n
{\n
    static int getMedian(int ar1[], int ar2[], int n)\n
    {  \n
        int i = 0; \n
        int j = 0;\n
        int count;\n
        int m1 = -1, m2 = -1;\n

        for (count = 0; count <= n; count++)\n
        {\n
            if (i == n)\n
            {\n
                m1 = m2;\n
                m2 = ar2[0];\n
                break;\n
            }\n

            else if (j == n)\n
            {\n
                m1 = m2;\n
                m2 = ar1[0];\n
                break;\n
            }\n

            if (ar1[i] <= ar2[j])\n
            {  \n
                m1 = m2; \n
                m2 = ar1[i];\n
                i++;\n
            }\n
            else\n
            {\n
                m1 = m2; \n
                m2 = ar2[j];\n
                j++;\n
            }\n
        }\n

        return (m1 + m2)/2;\n
    }\n

    public static void main (String[] args)\n
    {\n
        int ar1[] = {1, 12, 15, 26, 38};\n
        int ar2[] = {2, 13, 17, 30, 45};\n

        int n1 = ar1.length;\n
        int n2 = ar2.length;\n
        if (n1 == n2)\n
            System.out.println(\"Median is \" +getMedian(ar1, ar2, n1));\n
        else\n
            System.out.println(\"arrays are of unequal size\");\n
    }   \n
}    \n
        ]]>
    </string>

    <string name="Median_of_2_sorted_arrays_of_different_size">
        <![CDATA[
class Main\n
{\n

static int getMedian(int ar1[], int ar2[], int n, int m)\n
{\n
    int i = 0;\n

    int j = 0;\n
    int count;\n
    int m1 = -1, m2 = -1;\n

    if ((m + n) % 2 == 1)\n
    {\n
        for(count = 0;\n
            count <= (n + m) / 2;
            count++)\n
        {\n
            if (i != n && j != m)\n
            {\n
                m1 = (ar1[i] > ar2[j]) ?ar2[j++] : ar1[i++];\n
            }\n
            else if (i < n)\n
            {\n
                m1 = ar1[i++];\n
            }\n

            else\n
            {\n
                m1 = ar2[j++];\n
            }\n
        }\n
        return m1;\n
    }\n

    else\n
    {\n
        for(count = 0;
            count <= (n + m) / 2;
            count++)\n
        {\n
            m2 = m1;\n
            if (i != n && j != m)\n
            {\n
                m1 = (ar1[i] > ar2[j]) ?ar2[j++] : ar1[i++];\n
            }\n
            else if (i < n)\n
            {\n
                m1 = ar1[i++];\n
            }\n
            else\n
            {\n
                m1 = ar2[j++];\n
            }\n
        }\n
        return (m1 + m2) / 2;\n
    }\n
}\n

public static void main(String[] args)\n
{\n
    int ar1[] = { 900 };\n
    int ar2[] = { 5, 8, 10, 20 };\n

    int n1 = ar1.length;\n
    int n2 = ar2.length;\n

    System.out.println(getMedian(ar1, ar2, n1, n2));\n
}\n
}  \n
        ]]>
    </string>
    <string name="Spiral_traversal_on_a_Matrix">
        <![CDATA[
import java.util.*;\n

class Main\n
{\n
    static int R = 4;\n
    static int C = 4;\n

    static void print(int arr[][], int i, int j, int m, int n)\n
    {\n

        if (i >= m || j >= n) \n
        {\n
            return;\n
        }\n

        for (int p = i; p < n; p++) \n
        {\n
            System.out.print(arr[i][p] + \" \");\n
        }\n

        for (int p = i + 1; p < m; p++) \n
        {\n
            System.out.print(arr[p][n - 1] + \" \");\n
        }\n

        if ((m - 1) != i) \n
        {\n
            for (int p = n - 2; p >= j; p-\-)
            {\n
                System.out.print(arr[m - 1][p] + \" \");\n
            }\n
        }\n

        if ((n - 1) != j) \n
        {\n
            for (int p = m - 2; p > i; p-\-)\n
             {\n
                System.out.print(arr[p][j] + \" \");\n
            }\n
        }\n
        print(arr, i + 1, j + 1, m - 1, n - 1);\n
    }\n


    public static void main(String[] args)\n
    {\n
        int a[][] = { { 1, 2, 3, 4 },\n
                      { 5, 6, 7, 8 },\n
                      { 9, 10, 11, 12 },\n
                      { 13, 14, 15, 16 }\n
                       };\n


        print(a, 0, 0, R, C);\n
    }\n
}\n
        ]]>
    </string>

    <string name="Search_an_element_in_a_matrix">
        <![CDATA[
import java.util.*;\n

class Main \n
{\n
    public static void main(String[] args)\n
    {\n
        int a[][] = {{0,1,12,3}, {4,5,6,7}, {8,9,10,11}};;\n

        int size = 4;\n
        int search = 6;\n
        int flag=0;\n

        for(int i=0; i<size; i++)\n
        {\n

            for(int j=0; j<size; j++)\n
            {\n
                if(a[i][j]==search)\n
                {\n
                    System.out.println(\"Element is found at (\"+ i+\", \"+ j +\") position\");\n
                    flag=1;\n
                    break;\n
                }\n
            }\n

            if(flag==1)\n
            break;\n
        }\n

        if(flag==0)\n
            System.out.println(\"Not found\");\n
    }\n
}      \n
        ]]>
    </string>

    <string name="Find_median_in_a_row_wise_sorted_matrix">
        <![CDATA[
public class Main\n
{\n

    public static void main(String[] args)\n
    {\n
        int r = 3, c = 3;\n
        int mat[][]= { {1,3,5}, {2,6,9}, {3,6,9} };\n




       int[] arr;  arr = new int[9];\n
        int x=0;\n

        for(int i=0; i<3; i++)\n
        {\n
            for(int j=0; j<3; j++)\n
            {\n
                arr[x++] = mat[i][j];\n
            }\n
        }\n

        for(int i=0; i<9; i++)\n
        {\n
            for(int j=i+1; j<9; j++)\n
            {\n
                if(arr[i]>arr[j])\n
                {\n
                    int temp = arr[i];\n
                    arr[i] = arr[j];\n
                    arr[j] = temp;\n
                }\n
            }\n
        }\n

        System.out.println(\"Median of the given matrix is : \"+ arr[4]);\n

    }\n
}\n
        ]]>
    </string>

    <string name="Find_row_with_maximum_no._of_1s">
        <![CDATA[
public class Main \n
{\n

	static boolean isPerfectSquare(int x)\n
	{\n
		if (x >= 0) \n
		{\n

			int sr = (int)Math.sqrt(x);\n

			return ((sr * sr) == x);\n
		}\n
		return false;\n
	}\n

	public static void main(String[] args)\n
	{\n
		int x = 84;\n

		if (isPerfectSquare(x))\n
			System.out.print(\"True\");\n
		else\n
			System.out.print(\"False\");\n
	}\n
}      \n
        ]]>
    </string>

    <string name="Print_elements_in_sorted_order">
        <![CDATA[
import java.util.Arrays;\n

class Main\n
{\n

    public static void main(String args[])\n
    {\n
        int mat[][] = {{10, 20, 30, 40},\n
                       {15, 25, 35, 45},\n
                       {27, 29, 37, 48},\n
                       {32, 33, 39, 50}};\n

        int n=4, m=4;\n

        int[] arr = new int[n*m];\n
        int x=0;\n

        for(int i=0; i<n; i++)\n
        {\n
            for(int j=0; j<m; j++)\n
            {\n
                arr[x++]=mat[i][j];\n
            }\n
        }\n

        int size = n*m;\n
        Arrays.sort(arr);\n

        for(int i=0; i<size; i++)\n
            System.out.print(arr[i] + \" \");\n
    }\n
}      \n
        ]]>
    </string>

    <string name="Find_a_specific_pair_in_matrix">
        <![CDATA[
import java.util.*;\n

class Main\n
{\n
    static int findMaxValue(int N,int mat[][])\n
    {\n
        int maxValue = Integer.MIN_VALUE;\n

        for (int a = 0; a < N - 1; a++)\n
          for (int b = 0; b < N - 1; b++)\n
             for (int d = a + 1; d < N; d++)\n
               for (int e = b + 1; e < N; e++)\n
                  if (maxValue < (mat[d][e] - mat[a][b]))\n
                      maxValue = mat[d][e] - mat[a][b];\n

        return maxValue;\n
    }\n

    public static void main (String[] args)\n
    {\n
        int N = 5;\n

        int mat[][] = {\n
                      { 1, 2, -1, -4, -20 },\n
                      { -8, -3, 4, 2, 1 },\n
                      { 3, 8, 6, 1, 3 },\n
                      { -4, -1, 1, 7, -6 },\n
                      { 0, -4, 10, -5, 1 }\n
                   };\n

        System.out.print(\"Maximum Value is \" + findMaxValue(N,mat));\n
    }\n
}\n
        ]]>
    </string>

    <string name="Rotate_matrix_by_90_degrees">
        <![CDATA[
import java.util.*;\n

class Main\n
{\n

  static void reverseRows (int mat[][])\n
  {\n
    int n = mat.length;\n
    for (int i = 0; i < mat.length; i++)\n
    {\n
	    for (int j = 0; j <  mat.length/ 2; j++)\n
	    {\n
            int temp = mat[i][j];\n
            mat[i][j] = mat[i][n - j - 1];\n
            mat[i][n - j - 1] = temp;\n
	    }\n
    }\n

  }\n


  static void transpose (int arr[][])\n
  {\n
    for (int i = 0; i < arr.length; i++)\n
        for (int j = i; j < arr[0].length; j++)\n
        {\n
	        int temp = arr[j][i];\n
	        arr[j][i] = arr[i][j];\n
	        arr[i][j] = temp;\n
	    }\n
  }\n

  static void printMatrix (int arr[][])\n
  {\n
        for (int i = 0; i < arr.length; i++)\n
        {\n
	        for (int j = 0; j < arr[0].length; j++)\n
	            System.out.print (arr[i][j] + \" \");\n
	        System.out.println (\" \");\n
        } \n
  }\n

  static void rotate90 (int arr[][])\n
  {\n
    transpose (arr);\n
    reverseRows (arr);\n
  }\n


  public static void main (String[]args)\n
  {\n
    int arr[][] = { {1, 2, 3, 4},\n
    {5, 6, 7, 8},\n
    {9, 10, 11, 12},\n
    {13, 14, 15, 16}\n
    };\n

    rotate90 (arr);\n
    printMatrix (arr);\n
  }\n
}    \n
        ]]>
    </string>

    <string name="Common_elements_in_all_rows_of_a_given_matrix">
        <![CDATA[
class Main\n
{\n

    public static void main(String args[])\n
    {\n
        int mat[][] = {{10, 20, 30, 40},\n
                       {15, 25, 35, 30},\n
                       {27, 30, 37, 48},\n
                       {32, 33, 39, 30}};\n

        int N=4, M=4;\n

        for (int j = 0; j < N; j++)\n
        {   \n
            int x = mat[0][j], count = 0;\n

            for (int i = 1; i < M; i++)\n
            {\n
                int flag = 0;\n
                    for(int k = 0; k < N; k++)\n
                    {\n
                        if(x==mat[i][k])\n
                        {\n
                            flag = 1;\n
                            mat[i][k] = -1;\n
                            break;\n
                        }\n
                    }\n
                if(flag==1)\n
                {\n
                    count++;   \n
            }\n
        }\n

        if (count==M-1)\n
           System.out.print(x);\n

        }\n
    }\n
}\n

        ]]>
    </string>

    <string name="Searching">
        Searching algorithms are easy to learn but are really important for college semester exams and companies offering package between 3 – 6 LPA would ask direct searching questions in online test/ interviews.
    </string>

    <string name="Linear_Search">
        <![CDATA[
class Main \n
{\n

    private static void LinearSearch(int[] arr, int item)\n
     {\n

        for(int i=0;i < arr.length;i++)\n
        {\n
            if(arr[i] == item)\n
            {\n
                System.out.println(item + \" Found at index : \" + i);\n
                return;\n
            }\n
        }\n
        System.out.println(\"Not found\");\n

    }\n

    public static void main(String args[])\n
     {\n
        int[] arr = {12, 5, 18, 25, -3, 19};\n

        int item = 25;\n
        LinearSearch(arr, item);\n
    }\n
}\n

\n
// Space Complexity : O(N)\n
// Time Complexity : O(N)   \n
        ]]>
    </string>
    
    <string name="Binary_Search">
        <![CDATA[
public class Main\n
{\n

    public static int binarySearch(int array[], int left, int right, int item)\n
    {\n

        if (right >= left)\n
        {\n

            // calculation of new mid\n
            int mid = left + (right - left)/2;\n

            // returns position where found \n
            if (array[mid] == item)\n
                return mid+1;\n

            // goes to recursive calls in left half\n
            if (array[mid] > item)\n
                return binarySearch(array, left, mid-1, item);\n

                // goes to recursive calls in right half\n
            else\n
                return binarySearch(array, mid+1, right, item);\n
        }\n
        // if element is not found we return -1\n
        else\n
            return -1;
    }\\n
    public static void main(String args[])\n
    {\n

        int[ ] array = {10, 20, 30, 40, 50, 60, 70, 80};\n
        int item = 70;\n
        int size = array.length;\n

        int position = binarySearch(array, 0, size-1, item);\n

        if(position == -1)\n
            System.out.println(\"Element not found\");\n
        else\n
            System.out.println(\"The value \" + item + \" found at position: \" + position);\n

    }\n
}        \n
        ]]>
    </string>

    <string name="Sorting">
        Sorting algorithms are easy to learn but are really important for college semester exams and companies offering package between 3 – 6 LPA would ask direct searching questions in online test/ interviews.
    </string>

    <string name="Bubble_Sort">
        <![CDATA[

class Main\n
{\n
    static void bubbleSort(int a[])\n
    {\n
        int len = a.length; // calculating the length of array\n
        for (int i = 0; i < len-1; i++)\n
            for (int j = 0; j < len-i-1; j++)\n
                if (a[j] > a[j+1]) //comparing the pair of elements\n
                {\n
                    // swapping\n
                     a[j+1] and a[i]\n
                    int temp = a[j];\n
                    a[j] = a[j+1];\n
                    a[j+1] = temp;\n
                }\n
    }\n

    /* Prints the array */\n
    static void printArray(int a[])\n
    {\n
        int len = a.length;\n
        for (int i = 0; i < len; i++)\n
            System.out.print(a[i] + \" \");\n

        System.out.println();\n
    }\n


    public static void main(String args[])\n
    {\n
        int arr[] = {64, 34, 25, 12, 22, 11, 90};\n

        bubbleSort(arr);\n

        System.out.println(\"Sorted array\");\n

        printArray(arr);\n
    }\n
}\n

// Time Complexity : O(N^2)\n
// Space Complexity : O(1)\n
        ]]>
    </string>
    
    <string name="Insertion_Sort">
        <![CDATA[

class Main\n
{\n

    public static void main(String args[])\n
    {\n
        int a[] = {11, 9, 7, 15, 6, 10, 5, 17};\n

        System.out.println(\"Array Before Insertion Sort: \");\n
        printArray(a);\n

        insertionSort(a);\n

        System.out.println(\"Array After Insertion Sort: \");\n
        printArray(a);\n
    }\n

    /*Function to sort array using insertion sort*/\n
    static void insertionSort(int arr[])\n
    {\n
        int len = arr.length; \n
        for (int i = 1; i < len; i++) \n
        { \n
            int key = arr[i]; \n
            int j = i - 1; \n

            /* Shift elements of a[i-1 .... 0], that are greater
            than key, to one position right of their
            current position */ \n
            while (j >= 0 && arr[j] > key)\n
            {\n
                arr[j + 1] = arr[j];\n
                j = j - 1;\n
            }\n
            arr[j + 1] = key;\n
        }\n
    }\n

    /* A utility function to print array of size n*/\n
    static void printArray(int a[])\n
    {\n
        int len = a.length;\n
        for (int i = 0; i < len; ++i)\n
            System.out.print(a[i] + \" \");\n
        System.out.println();\n
    }\n
}        \n


// Time Complexity : O(N^2)\n
// Space Complexity : O(1)\n
// Best Case : When already Sorted, Worst Case : When reverse Sorted\n
        ]]>
    </string>

    <string name="Selection_Sort">
        <![CDATA[

class Main\n
{\n
    // Main method, responsible for the execution of the code\n
    public static void main(String args[])\n
    {\n
        int arr[] = {72, 50, 10, 44, 20};\n

        selectionSort(arr);\n

        System.out.println(\"Sorted array\");\n

        printArray(arr);\n
    }\n

    static void selectionSort(int a[])\n
    {\n
        int len = a.length;\n

        // One by one move boundary of unsorted sub-array\n
        for (int i = 0; i < len-1; i++)\n
        {\n
            // Find the minimum element in unsorted array\n
            int min = i;\n
            for (int j = i+1; j < len; j++)\n
                if (a[j] < a[min])\n
                    min = j;\n

            // Swap the found minimum element with the\n
            // first element in unsorted part of the array\n
            int temp = a[min];\n
            a[min] = a[i];\n
            a[i] = temp;\n
        }\n
    }\n

    // Prints the sorted array\n
    static void printArray(int a[])\n
    {\n
        int len = a.length;\n
        for (int i=0; i<len; ++i)\n
            System.out.print(a[i] + \" \");\n

        System.out.println();\n
    }\n
}        \n


// Time Complexity : O(N^2)\n
// Space Complexity : O(1)\n
// Best Case, Worst Case, Avg Case : O(n^2)\n
        ]]>
    </string>

    <string name="Merge_Sort">
        <![CDATA[
class Main\n
 {\n
    public static void display(int[] arr, int size)\n
    {\n
        for(int i = 0; i < size; i++) \n
        {\n
            System.out.print(arr[i] + \" \");\n
        }\n
        System.out.println();\n
    }\n
    public static void main(String[] args)\n
    {\n
        int[] a = {12, 8, 4, 14, 36, 64, 15, 72, 67, 84};\n

        int size = a.length;\n
        display(a, size);\n

        mergeSort(a, 0, size - 1);\n
        display(a, size);\n
    }\n

    // this function apply merging and sorting in the array\n
    static void mergeSort(int[] a, int left, int right)\n
    {\n
        int mid;\n
        if(left < right)\n
        {\n

            mid = (left + right) / 2;\n


            mergeSort(a, left, mid);\n
            mergeSort(a, mid + 1, right);\n
            merge(a, left, mid, right);\n
        }\n
    }\n

    static void merge(int[] arr, int left, int mid, int right)\n
    {\n
        int i, j, k;\n
        int n1 = mid - left + 1;\n
        int n2 = right - mid;\n

        // create temp arrays to store left and right sub-arrays\n
        int L[] = new int[n1];\n
        int R[] = new int[n2];\n

        // Copying data to temp arrays L[] and R[]\n
        for (i = 0; i < n1; i++)\n
            L[i] = arr[left + i];\n
        for (j = 0; j < n2; j++)\n
            R[j] = arr[mid + 1 + j];\n

        // here we merge the temp arrays back into arr[l..r]\n
        i = 0; // Starting index of L[i]\n
        j = 0; // Starting index of R[i]\n
        k = left; // Starting index of merged sub-array\n

        while (i < n1 && j < n2)\n
        {\n
            // place the smaller item at arr[k] pos\n
            if (L[i] <= R[j]) \n
            {\n
                arr[k] = L[i];\n
                i++;\n
            }\n
            else {\n
                arr[k] = R[j];\n
                j++;\n
            }\n
            k++;\n
        }\n
        // Copy the remaining elements of L[], if any\n
        while (i < n1) {\n
            arr[k] = L[i];\n
            i++;\n
            k++;\n
        }\n
        // Copy the remaining elements of R[], if any\n
        while (j < n2) \n
        {\n
            arr[k] = R[j];\n
            j++;\n
            k++;\n
        }\n
    }\n
}\n
        ]]>
    </string>
    <string name="Quick_Sort">
        <![CDATA[
class Main\n
 {\n
    // this function display the array\n
    public static void display(int[] arr, int size)\n
    {\n
        for(int i = 0; i < size; i++) \n
        {\n
            System.out.print(arr[i] + \" \");\n
        }\n
        System.out.println();\n
    }\n
    // main function of the program\n
    public static void main(String[] args)\n
    {\n
        int[] a = {12, 11, 13, 5, 6, 7 };\n

        int size = a.length;\n
        display(a, size);\n

        quickSort(a, 0, size - 1);\n
        display(a, size);\n
    }\n
    // A utility function to swap two elements\n
    static void swap(int[] arr, int i, int j)\n
    {\n
        int temp = arr[i];\n
        arr[i] = arr[j];\n
        arr[j] = temp;\n
    }\n
    //Recursive function to apply quickSort\n
    static void quickSort(int[] arr, int low, int high)\n
    {\n
        if (low < high)\n
        {\n
       /* indexPI is partitioning index, partition() function will
        return index of partition */\n
            int indexPI  = partition(arr, low, high);\n

            quickSort(arr, low, indexPI  - 1);  //left partition\n
            quickSort(arr, indexPI  + 1, high); //right partition\n
        }\n
    }\n
    /* Partition function to do Partition
    elements on the left side of pivot elements would be smaller than pivot
    elements on the right side of pivot would be greater than the pivot
    */\n
    static int partition(int[] arr, int low, int high)\n
    {\n
        // Pivot element selected as right most element in array each time.\n
        int pivot = arr[high];\n
        int swapIndex  = (low - 1);   //swapping index.\n

        for (int j = low; j <= high- 1; j++)\n
        {\n

            if (arr[j] < pivot)\n
            {\n
                swapIndex++;    //increment swapping index.\n
                swap(arr, swapIndex, j);\n
            }\n
        }\n

        swap(arr, swapIndex + 1, high);\n

        return (swapIndex + 1);\n
    }\n
}\n
        ]]>
    </string>
    
    <string name="Counting_Sort">
        <![CDATA[
import java.util.util;\n

class countSort\n
 {\n
    void applycountSort(int array[], int size)\n
     {\n
        int[] output = new int[size + 1];\n

        // Here we find the largest item in the array\n
        int max = array[0];\n
        for (int i = 1; i < size; i++) \n
        {\n
         if (array[i] > max)\n
                max = array[i];\n
        }\n
        int[] count = new int[max + 1];\n

        // Initialize the count for each element in array to 0\n
        for (int i = 0; i < max; ++i) \n
        {\n
            count[i] = 0;\n
        }\n

        // For each element we store the count\n
        for (int i = 0; i < size; i++)\n
         {\n
            count[array[i]]++;\n
        }\n

        // Store the cummulative count of each array\n
        for (int i = 1; i <= max; i++)\n
        {\n
            count[i] += count[i - 1];\n
        }

        // Search the index of each element of the actual array in count array, and\n
        // place the elements in output array\n
        for (int i = size - 1; i >= 0; i-\-) \n
        {\n
            output[count[array[i]] - 1] = array[i];\n
            count[array[i]]-\-;\n
        }\n

        // Transfer the sorted items into actual array\n
        for (int i = 0; i < size; i++) \n
        {\n
            array[i] = output[i];\n
        }\n
    }\n

    // Driver code\n
    public static void main(String args[]) \n
    {\n
        int[] data = {2, 5, 2, 8, 1, 4, 1};\n
        int size = data.length;\n

        countSort obj = new countSort();\n
        obj.applycountSort(data, size);\n

        System.out.println(\"Array After Sorting: \");\n
        System.out.println(Arrays.toString(data));\n
    }\n
}\n
        ]]>
    </string>

    <string name="Radix_Sort">
        <![CDATA[
import java.util.*;\n

class Main\n
	{\n
			//Main Method to check for above function\n
		public static void main (String[] args)\n
		  {\n
			int a[] = {17, 45, 75, 90, 82, 24, 12, 60};\n
			int len = a.length;\n
			radixsort(a,len);\n
			print(a,len);\n
		   }\n

	// A utility function to get maximum value in a[]\n
	static int getMax(int a[], int n)\n
	{\n
		int mx = a[0];\n
		for (int i = 1; i < len; i++)\n
			if (a[i] > mx)\n
				mx = a[i];\n
		return mx;\n
	}\n

	// A function to do counting sort of arr[] according to\n
	// the digit represented by exp.\n
	static void countSort(int a[], int len, int exp)\n
	{\n
		int output[] = new int[len]; // output array\n
		int i;\n
		int count[] = new int[10];\n
		Arrays.fill(count,0);\n

		// Store count of occurrences in count[]\n
		for (i = 0; i < len; i++)\n
			count[ (a[i]/exp)%10 ]++;\n

		// Change count[i] so that count[i] now contains\n
		// actual position of this digit in output[]\n
		for (i = 1; i < 10; i++)\n
			count[i] += count[i - 1];\n

		// Build the output array\n
		for (i = len - 1; i >= 0; i-\-)\n
		{\n
			output[count[ (a[i]/exp)%10 ] - 1] = a[i];\n
			count[ (a[i]/exp)%10 ]-\-;\n
		}\n

		// Copy the output array to arr[], so that arr[] now\n
		// contains sorted numbers according to curent digit\n
		for (i = 0; i < len; i++)\n
			a[i] = output[i];\n
	}\n

	// The main function to that sorts arr[] of size n using\n
	// Radix Sort\n
	static void radixsort(int a[], int len)\n
	{\n
		// Find the maximum number to know number of digits\n
		int m = getMax(a, len);\n

		// Do counting sort for every digit. Note that instead\n
		// of passing digit number, exp is passed. exp is 10^i\n
		// where i is current digit number\n
		for (int exp = 1; m/exp > 0; exp *= 10)\n
			countSort(a, len, exp);\n
	}\n

	// A utility function to print an array\n
	static void print(int a[], int len)\n
	{\n
		for (int i=0; i<len; i++)\n
			System.out.print(a[i]+\" \");\n
	}\n

}\n
        ]]>
    </string>

    <string name="Heap_Sort">
        <![CDATA[
public class Main\n
{ \n

    public static void main(String args[]) \n
       { \n
          int a[] = {12, 11, 13, 5, 6, 7}; \n
          int len = a.length;\n

           PrepInsta ob = new PrepInsta(); \n
           ob.sort(a); \n

            System.out.println(\"Sorted array is\"); \n
            printArray(a); \n
       } \n
           public void sort(int a[]) \n
               { \n
                  int len = a.length; \n

                 // Build heap (rearrange array) \n
                 for (int i = len / 2 - 1; i >= 0; i-\-) \n
                 heapify(a, len, i); \n

                 // One by one extract an element from heap \n
                 for (int i=len-1; i>=0; i-\-) \n
                       { \n
                         // Move current root to end \n
                          int temp = a[0]; \n
                          a[0] = a[i]; \n
                          a[i] = temp; \n

                           // call max heapify on the reduced heap \n
                           heapify(a, i, 0); \n
                          } \n
                  }  \n

         // To heapify a subtree rooted with node i which is \n
        // an index in arr[]. n is size of heap \n
       void heapify(int a[], int len, int i) \n
           { \n
              int largest = i; // Initialize largest as root \n
              int l = 2*i + 1; // left = 2*i + 1 \n
              int r = 2*i + 2; // right = 2*i + 2 \n

               // If left child is larger than root \n
               if (l < len && a[l] > a[largest])\n
               largest = l;\n

               // If right child is larger than largest so far\n
               if (r < len && a[r] > a[largest])\n
               largest = r;\n

               // If largest is not root\n
               if (largest != i)\n
                     {\n
                        int swap = a[i];\n
                        a[i] = a[largest];\n
                        a[largest] = swap;\n

                       // Recursively heapify the affected sub-tree\n
                         heapify(a, len, largest);\n
                       }\n
                   }\n

           /* A utility function to print array of size n */\n
           static void printArray(int a[])\n
                 {\n
                     int len = a.length;\n
                     for (int i=0; i<len; ++i)\n
                     System.out.print(a[i]+\" \");\n
                     System.out.println();\n
                  }\n

      }\n
        ]]>
    </string>

    <string name="Linked_List">
        A linked list is a linear data structure. In which we can sequentially store the data. Unlike an array linked list is a dynamic data structure the size of a linked list can grow or shrink depending on the situation.
    </string>


</resources>
